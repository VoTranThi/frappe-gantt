{"version":3,"file":"frappe-gantt.js","sources":["../../src/date_utils.js","../../src/svg_utils.js","../../src/arrow.js","../../src/bar.js","../../src/popup.js","../../src/defaults.js","../../src/index.js"],"sourcesContent":["const YEAR = 'year';\r\nconst MONTH = 'month';\r\nconst DAY = 'day';\r\nconst HOUR = 'hour';\r\nconst MINUTE = 'minute';\r\nconst SECOND = 'second';\r\nconst MILLISECOND = 'millisecond';\r\n\r\nexport default {\r\n    parse_duration(duration) {\r\n        const regex = /([0-9]+)(y|m|d|h|min|s|ms)/gm;\r\n        const matches = regex.exec(duration);\r\n        if (matches !== null) {\r\n            if (matches[2] === 'y') {\r\n                return { duration: parseInt(matches[1]), scale: `year` };\r\n            } else if (matches[2] === 'm') {\r\n                return { duration: parseInt(matches[1]), scale: `month` };\r\n            } else if (matches[2] === 'd') {\r\n                return { duration: parseInt(matches[1]), scale: `day` };\r\n            } else if (matches[2] === 'h') {\r\n                return { duration: parseInt(matches[1]), scale: `hour` };\r\n            } else if (matches[2] === 'min') {\r\n                return { duration: parseInt(matches[1]), scale: `minute` };\r\n            } else if (matches[2] === 's') {\r\n                return { duration: parseInt(matches[1]), scale: `second` };\r\n            } else if (matches[2] === 'ms') {\r\n                return { duration: parseInt(matches[1]), scale: `millisecond` };\r\n            }\r\n        }\r\n    },\r\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\r\n        if (date instanceof Date) {\r\n            return date;\r\n        }\r\n        if (typeof date === 'string') {\r\n            let date_parts, time_parts;\r\n            const parts = date.split(' ');\r\n            date_parts = parts[0]\r\n                .split(date_separator)\r\n                .map((val) => parseInt(val, 10));\r\n            time_parts = parts[1] && parts[1].split(time_separator);\r\n\r\n            // month is 0 indexed\r\n            date_parts[1] = date_parts[1] ? date_parts[1] - 1 : 0;\r\n\r\n            let vals = date_parts;\r\n\r\n            if (time_parts && time_parts.length) {\r\n                if (time_parts.length === 4) {\r\n                    time_parts[3] = '0.' + time_parts[3];\r\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\r\n                }\r\n                vals = vals.concat(time_parts);\r\n            }\r\n            return new Date(...vals);\r\n        }\r\n    },\r\n\r\n    to_string(date, with_time = false) {\r\n        if (!(date instanceof Date)) {\r\n            throw new TypeError('Invalid argument type');\r\n        }\r\n        const vals = this.get_date_values(date).map((val, i) => {\r\n            if (i === 1) {\r\n                // add 1 for month\r\n                val = val + 1;\r\n            }\r\n\r\n            if (i === 6) {\r\n                return padStart(val + '', 3, '0');\r\n            }\r\n\r\n            return padStart(val + '', 2, '0');\r\n        });\r\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\r\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\r\n\r\n        return date_string + (with_time ? ' ' + time_string : '');\r\n    },\r\n\r\n    format(date, date_format = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\r\n        const dateTimeFormat = new Intl.DateTimeFormat(lang, {\r\n            month: 'long',\r\n        });\r\n        const dateTimeFormatShort = new Intl.DateTimeFormat(lang, {\r\n            month: 'short',\r\n        });\r\n        const month_name = dateTimeFormat.format(date);\r\n        const month_name_capitalized =\r\n            month_name.charAt(0).toUpperCase() + month_name.slice(1);\r\n\r\n        const values = this.get_date_values(date).map((d) => padStart(d, 2, 0));\r\n        const format_map = {\r\n            YYYY: values[0],\r\n            MM: padStart(+values[1] + 1, 2, 0),\r\n            DD: values[2],\r\n            HH: values[3],\r\n            mm: values[4],\r\n            ss: values[5],\r\n            SSS: values[6],\r\n            D: values[2],\r\n            MMMM: month_name_capitalized,\r\n            MMM: dateTimeFormatShort.format(date),\r\n        };\r\n\r\n        let str = date_format;\r\n        const formatted_values = [];\r\n\r\n        Object.keys(format_map)\r\n            .sort((a, b) => b.length - a.length) // big string first\r\n            .forEach((key) => {\r\n                if (str.includes(key)) {\r\n                    str = str.replaceAll(key, `$${formatted_values.length}`);\r\n                    formatted_values.push(format_map[key]);\r\n                }\r\n            });\r\n\r\n        formatted_values.forEach((value, i) => {\r\n            str = str.replaceAll(`$${i}`, value);\r\n        });\r\n\r\n        return str;\r\n    },\r\n\r\n    diff(date_a, date_b, scale = 'day') {\r\n        let milliseconds, seconds, hours, minutes, days, months, years;\r\n\r\n        milliseconds =\r\n            date_a -\r\n            date_b +\r\n            (date_b.getTimezoneOffset() - date_a.getTimezoneOffset()) * 60000;\r\n        seconds = milliseconds / 1000;\r\n        minutes = seconds / 60;\r\n        hours = minutes / 60;\r\n        days = hours / 24;\r\n        // Calculate months across years\r\n        let yearDiff = date_a.getFullYear() - date_b.getFullYear();\r\n        let monthDiff = date_a.getMonth() - date_b.getMonth();\r\n        // calculate extra\r\n        monthDiff += (days % 30) / 30;\r\n\r\n        /* If monthDiff is negative, date_b is in an earlier month than\r\n        date_a and thus subtracted from the year difference in months */\r\n        months = yearDiff * 12 + monthDiff;\r\n        /* If date_a's (e.g. march 1st) day of the month is smaller than date_b (e.g. february 28th),\r\n        adjust the month difference */\r\n        if (date_a.getDate() < date_b.getDate()) {\r\n            months--;\r\n        }\r\n\r\n        // Calculate years based on actual months\r\n        years = months / 12;\r\n\r\n        if (!scale.endsWith('s')) {\r\n            scale += 's';\r\n        }\r\n\r\n        return (\r\n            Math.round(\r\n                {\r\n                    milliseconds,\r\n                    seconds,\r\n                    minutes,\r\n                    hours,\r\n                    days,\r\n                    months,\r\n                    years,\r\n                }[scale] * 100,\r\n            ) / 100\r\n        );\r\n    },\r\n\r\n    today() {\r\n        const vals = this.get_date_values(new Date()).slice(0, 3);\r\n        return new Date(...vals);\r\n    },\r\n\r\n    now() {\r\n        return new Date();\r\n    },\r\n\r\n    add(date, qty, scale) {\r\n        qty = parseInt(qty, 10);\r\n        const vals = [\r\n            date.getFullYear() + (scale === YEAR ? qty : 0),\r\n            date.getMonth() + (scale === MONTH ? qty : 0),\r\n            date.getDate() + (scale === DAY ? qty : 0),\r\n            date.getHours() + (scale === HOUR ? qty : 0),\r\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\r\n            date.getSeconds() + (scale === SECOND ? qty : 0),\r\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0),\r\n        ];\r\n        return new Date(...vals);\r\n    },\r\n\r\n    start_of(date, scale) {\r\n        const scores = {\r\n            [YEAR]: 6,\r\n            [MONTH]: 5,\r\n            [DAY]: 4,\r\n            [HOUR]: 3,\r\n            [MINUTE]: 2,\r\n            [SECOND]: 1,\r\n            [MILLISECOND]: 0,\r\n        };\r\n\r\n        function should_reset(_scale) {\r\n            const max_score = scores[scale];\r\n            return scores[_scale] <= max_score;\r\n        }\r\n\r\n        const vals = [\r\n            date.getFullYear(),\r\n            should_reset(YEAR) ? 0 : date.getMonth(),\r\n            should_reset(MONTH) ? 1 : date.getDate(),\r\n            should_reset(DAY) ? 0 : date.getHours(),\r\n            should_reset(HOUR) ? 0 : date.getMinutes(),\r\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\r\n            should_reset(SECOND) ? 0 : date.getMilliseconds(),\r\n        ];\r\n\r\n        return new Date(...vals);\r\n    },\r\n\r\n    clone(date) {\r\n        return new Date(...this.get_date_values(date));\r\n    },\r\n\r\n    get_date_values(date) {\r\n        return [\r\n            date.getFullYear(),\r\n            date.getMonth(),\r\n            date.getDate(),\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds(),\r\n        ];\r\n    },\r\n\r\n    convert_scales(period, to_scale) {\r\n        const TO_DAYS = {\r\n            millisecond: 1 / 60 / 60 / 24 / 1000,\r\n            second: 1 / 60 / 60 / 24,\r\n            minute: 1 / 60 / 24,\r\n            hour: 1 / 24,\r\n            day: 1,\r\n            month: 30,\r\n            year: 365,\r\n        };\r\n        const { duration, scale } = this.parse_duration(period);\r\n        let in_days = duration * TO_DAYS[scale];\r\n        return in_days / TO_DAYS[to_scale];\r\n    },\r\n\r\n    get_days_in_month(date) {\r\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\n        const month = date.getMonth();\r\n\r\n        if (month !== 1) {\r\n            return no_of_days[month];\r\n        }\r\n\r\n        // Feb\r\n        const year = date.getFullYear();\r\n        if ((year % 4 === 0 && year % 100 != 0) || year % 400 === 0) {\r\n            return 29;\r\n        }\r\n        return 28;\r\n    },\r\n\r\n    get_days_in_year(date) {\r\n        return date.getFullYear() % 4 ? 365 : 366;\r\n    },\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\r\nfunction padStart(str, targetLength, padString) {\r\n    str = str + '';\r\n    targetLength = targetLength >> 0;\r\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\r\n    if (str.length > targetLength) {\r\n        return String(str);\r\n    } else {\r\n        targetLength = targetLength - str.length;\r\n        if (targetLength > padString.length) {\r\n            padString += padString.repeat(targetLength / padString.length);\r\n        }\r\n        return padString.slice(0, targetLength) + String(str);\r\n    }\r\n}\r\n","export function $(expr, con) {\r\n    return typeof expr === 'string'\r\n        ? (con || document).querySelector(expr)\r\n        : expr || null;\r\n}\r\n\r\nexport function createSVG(tag, attrs) {\r\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n    for (let attr in attrs) {\r\n        if (attr === 'append_to') {\r\n            const parent = attrs.append_to;\r\n            parent.appendChild(elem);\r\n        } else if (attr === 'innerHTML') {\r\n            elem.innerHTML = attrs.innerHTML;\r\n        } else if (attr === 'clipPath') {\r\n            elem.setAttribute('clip-path', 'url(#' + attrs[attr] + ')');\r\n        } else {\r\n            elem.setAttribute(attr, attrs[attr]);\r\n        }\r\n    }\r\n    return elem;\r\n}\r\n\r\nexport function animateSVG(svgElement, attr, from, to) {\r\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\r\n\r\n    if (animatedSvgElement === svgElement) {\r\n        // triggered 2nd time programmatically\r\n        // trigger artificial click event\r\n        const event = document.createEvent('HTMLEvents');\r\n        event.initEvent('click', true, true);\r\n        event.eventName = 'click';\r\n        animatedSvgElement.dispatchEvent(event);\r\n    }\r\n}\r\n\r\nfunction getAnimationElement(\r\n    svgElement,\r\n    attr,\r\n    from,\r\n    to,\r\n    dur = '0.4s',\r\n    begin = '0.1s',\r\n) {\r\n    const animEl = svgElement.querySelector('animate');\r\n    if (animEl) {\r\n        $.attr(animEl, {\r\n            attributeName: attr,\r\n            from,\r\n            to,\r\n            dur,\r\n            begin: 'click + ' + begin, // artificial click\r\n        });\r\n        return svgElement;\r\n    }\r\n\r\n    const animateElement = createSVG('animate', {\r\n        attributeName: attr,\r\n        from,\r\n        to,\r\n        dur,\r\n        begin,\r\n        calcMode: 'spline',\r\n        values: from + ';' + to,\r\n        keyTimes: '0; 1',\r\n        keySplines: cubic_bezier('ease-out'),\r\n    });\r\n    svgElement.appendChild(animateElement);\r\n\r\n    return svgElement;\r\n}\r\n\r\nfunction cubic_bezier(name) {\r\n    return {\r\n        ease: '.25 .1 .25 1',\r\n        linear: '0 0 1 1',\r\n        'ease-in': '.42 0 1 1',\r\n        'ease-out': '0 0 .58 1',\r\n        'ease-in-out': '.42 0 .58 1',\r\n    }[name];\r\n}\r\n\r\n$.on = (element, event, selector, callback) => {\r\n    if (!callback) {\r\n        callback = selector;\r\n        $.bind(element, event, callback);\r\n    } else {\r\n        $.delegate(element, event, selector, callback);\r\n    }\r\n};\r\n\r\n$.off = (element, event, handler) => {\r\n    element.removeEventListener(event, handler);\r\n};\r\n\r\n$.bind = (element, event, callback) => {\r\n    event.split(/\\s+/).forEach(function (event) {\r\n        element.addEventListener(event, callback);\r\n    });\r\n};\r\n\r\n$.delegate = (element, event, selector, callback) => {\r\n    element.addEventListener(event, function (e) {\r\n        const delegatedTarget = e.target.closest(selector);\r\n        if (delegatedTarget) {\r\n            e.delegatedTarget = delegatedTarget;\r\n            callback.call(this, e, delegatedTarget);\r\n        }\r\n    });\r\n};\r\n\r\n$.closest = (selector, element) => {\r\n    if (!element) return null;\r\n\r\n    if (element.matches(selector)) {\r\n        return element;\r\n    }\r\n\r\n    return $.closest(selector, element.parentNode);\r\n};\r\n\r\n$.attr = (element, attr, value) => {\r\n    if (!value && typeof attr === 'string') {\r\n        return element.getAttribute(attr);\r\n    }\r\n\r\n    if (typeof attr === 'object') {\r\n        for (let key in attr) {\r\n            $.attr(element, key, attr[key]);\r\n        }\r\n        return;\r\n    }\r\n\r\n    element.setAttribute(attr, value);\r\n};\r\n","import { createSVG } from './svg_utils';\r\n\r\nexport default class Arrow {\r\n    constructor(gantt, from_task, to_task) {\r\n        this.gantt = gantt;\r\n        this.from_task = from_task;\r\n        this.to_task = to_task;\r\n\r\n        this.calculate_path();\r\n        this.draw();\r\n    }\r\n\r\n    calculate_path() {\r\n        let start_x =\r\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\r\n\r\n        const condition = () =>\r\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\r\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\r\n\r\n        while (condition()) {\r\n            start_x -= 10;\r\n        }\r\n        start_x -= 10;\r\n\r\n        let start_y =\r\n            this.gantt.config.header_height +\r\n            this.gantt.options.bar_height +\r\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\r\n                this.from_task.task._index +\r\n            this.gantt.options.padding / 2;\r\n\r\n        let end_x = this.to_task.$bar.getX() - 13;\r\n        let end_y =\r\n            this.gantt.config.header_height +\r\n            this.gantt.options.bar_height / 2 +\r\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\r\n                this.to_task.task._index +\r\n            this.gantt.options.padding / 2;\r\n\r\n        const from_is_below_to =\r\n            this.from_task.task._index > this.to_task.task._index;\r\n\r\n        let curve = this.gantt.options.arrow_curve;\r\n        const clockwise = from_is_below_to ? 1 : 0;\r\n        let curve_y = from_is_below_to ? -curve : curve;\r\n\r\n        if (\r\n            this.to_task.$bar.getX() <=\r\n            this.from_task.$bar.getX() + this.gantt.options.padding\r\n        ) {\r\n            let down_1 = this.gantt.options.padding / 2 - curve;\r\n            if (down_1 < 0) {\r\n                down_1 = 0;\r\n                curve = this.gantt.options.padding / 2;\r\n                curve_y = from_is_below_to ? -curve : curve;\r\n            }\r\n            const down_2 =\r\n                this.to_task.$bar.getY() +\r\n                this.to_task.$bar.getHeight() / 2 -\r\n                curve_y;\r\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\r\n            this.path = `\r\n                M ${start_x} ${start_y}\r\n                v ${down_1}\r\n                a ${curve} ${curve} 0 0 1 ${-curve} ${curve}\r\n                H ${left}\r\n                a ${curve} ${curve} 0 0 ${clockwise} ${-curve} ${curve_y}\r\n                V ${down_2}\r\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\r\n                L ${end_x} ${end_y}\r\n                m -5 -5\r\n                l 5 5\r\n                l -5 5`;\r\n        } else {\r\n            if (end_x < start_x + curve) curve = end_x - start_x;\r\n\r\n            let offset = from_is_below_to ? end_y + curve : end_y - curve;\r\n\r\n            this.path = `\r\n              M ${start_x} ${start_y}\r\n              V ${offset}\r\n              a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve}\r\n              L ${end_x} ${end_y}\r\n              m -5 -5\r\n              l 5 5\r\n              l -5 5`;\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.element = createSVG('path', {\r\n            d: this.path,\r\n            'data-from': this.from_task.task.id,\r\n            'data-to': this.to_task.task.id,\r\n        });\r\n    }\r\n\r\n    update() {\r\n        this.calculate_path();\r\n        this.element.setAttribute('d', this.path);\r\n    }\r\n}\r\n","import date_utils from './date_utils';\r\nimport { $, createSVG, animateSVG } from './svg_utils';\r\n\r\nexport default class Bar {\r\n    constructor(gantt, task) {\r\n        this.set_defaults(gantt, task);\r\n        this.prepare_wrappers();\r\n        this.prepare_helpers();\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        this.bar_group.innerHTML = '';\r\n        this.handle_group.innerHTML = '';\r\n        if (this.task.custom_class) {\r\n            this.group.classList.add(this.task.custom_class);\r\n        } else {\r\n            this.group.classList = ['bar-wrapper'];\r\n        }\r\n\r\n        this.prepare_values();\r\n        this.draw();\r\n        this.bind();\r\n    }\r\n\r\n    set_defaults(gantt, task) {\r\n        this.action_completed = false;\r\n        this.gantt = gantt;\r\n        this.task = task;\r\n        this.name = this.name || '';\r\n    }\r\n\r\n    prepare_wrappers() {\r\n        this.group = createSVG('g', {\r\n            class:\r\n                'bar-wrapper' +\r\n                (this.task.custom_class ? ' ' + this.task.custom_class : ''),\r\n            'data-id': this.task.id,\r\n        });\r\n        this.bar_group = createSVG('g', {\r\n            class: 'bar-group',\r\n            append_to: this.group,\r\n        });\r\n        this.handle_group = createSVG('g', {\r\n            class: 'handle-group',\r\n            append_to: this.group,\r\n        });\r\n    }\r\n\r\n    prepare_values() {\r\n        this.invalid = this.task.invalid;\r\n        this.height = this.gantt.options.bar_height;\r\n        this.image_size = this.height - 5;\r\n        if(!this.task._start)\r\n            this.task._start = new Date(this.task.start);\r\n        this.task._end = new Date(this.task.end);        \r\n\r\n        if(this.task.baseline){\r\n            if(!this.task._baseline_start)\r\n                this.task._baseline_start = new Date(this.task.baseline_start);\r\n            this.task._baseline_end = new Date(this.task.baseline_end);\r\n        }\r\n\r\n        this.compute_x();\r\n        this.compute_y();\r\n        this.compute_duration();\r\n        this.compute_baseline_duration();\r\n        this.corner_radius = this.gantt.options.bar_corner_radius;\r\n        this.width = this.gantt.config.column_width * this.duration;\r\n        if (!this.task.progress || this.task.progress < 0)\r\n            this.task.progress = 0;\r\n        if (this.task.progress > 100) this.task.progress = 100;\r\n\r\n        if(this.task.baseline){            \r\n            this.baseline_width = this.gantt.config.column_width * this.baseline_duration;\r\n            if (!this.task.baseline_progress)\r\n                this.task.baseline_progress = 0;\r\n            this.task.baseline_progress = Math.max(Math.min(this.task.baseline_progress, 100),0);    \r\n        } \r\n\r\n    }\r\n\r\n    prepare_helpers() {\r\n        SVGElement.prototype.getX = function () {\r\n            return +this.getAttribute('x');\r\n        };\r\n        SVGElement.prototype.getY = function () {\r\n            return +this.getAttribute('y');\r\n        };\r\n        SVGElement.prototype.getWidth = function () {\r\n            return +this.getAttribute('width');\r\n        };\r\n        SVGElement.prototype.getHeight = function () {\r\n            return +this.getAttribute('height');\r\n        };\r\n        SVGElement.prototype.getEndX = function () {\r\n            return this.getX() + this.getWidth();\r\n        };\r\n    }\r\n\r\n    prepare_expected_progress_values() {\r\n        this.compute_expected_progress();\r\n        this.expected_progress_width =\r\n            this.gantt.options.column_width *\r\n                this.duration *\r\n                (this.expected_progress / 100) || 0;\r\n    }\r\n\r\n    draw() {\r\n        this.draw_bar();\r\n        this.draw_progress_bar();\r\n        if (this.gantt.options.show_expected_progress) {\r\n            this.prepare_expected_progress_values();\r\n            this.draw_expected_progress_bar();\r\n        }\r\n        this.draw_label();\r\n        this.draw_resize_handles();\r\n\r\n        if (this.task.thumbnail) {\r\n            this.draw_thumbnail();\r\n        }\r\n        if(this.gantt.options.show_baseline)\r\n        {\r\n            this.draw_baselinebar();\r\n        }\r\n        \r\n    }\r\n\r\n    draw_bar() {\r\n        this.$bar = createSVG('rect', {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'bar',\r\n            append_to: this.bar_group,\r\n        });\r\n        if (this.task.color) this.$bar.style.fill = this.task.color;\r\n        animateSVG(this.$bar, 'width', 0, this.width);\r\n        \r\n        if (this.invalid) {\r\n            this.$bar.classList.add('bar-invalid');\r\n        }\r\n    }\r\n    draw_baselinebar() {\r\n        if(this.task.baseline)\r\n        {\r\n            this.$bar_baseline = createSVG('rect', {\r\n                x: this.baseline_x,\r\n                y: this.baseline_y,\r\n                width: this.baseline_width,\r\n                height: 10,\r\n                rx: this.corner_radius,\r\n                ry: this.corner_radius,\r\n                class: 'bar baseline',\r\n                append_to: this.bar_group,\r\n            });\r\n            if (this.task.baseline_color) \r\n            {\r\n                this.$bar_baseline.style.fill = this.task.baseline_color;\r\n            }else\r\n            {\r\n                this.$bar_baseline.style.fill = \"#b686ea\";\r\n            }\r\n            animateSVG(this.$bar_baseline, 'width', 0, this.baseline_width);\r\n        }        \r\n    }\r\n\r\n    draw_expected_progress_bar() {\r\n        if (this.invalid) return;\r\n        this.$expected_bar_progress = createSVG('rect', {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.expected_progress_width,\r\n            height: this.height,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'bar-expected-progress',\r\n            append_to: this.bar_group,\r\n        });\r\n\r\n        animateSVG(\r\n            this.$expected_bar_progress,\r\n            'width',\r\n            0,\r\n            this.expected_progress_width,\r\n        );\r\n    }\r\n\r\n    draw_progress_bar() {\r\n        if (this.invalid) return;\r\n        this.progress_width = this.calculate_progress_width();\r\n        let r = this.corner_radius;\r\n        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent))\r\n            r = this.corner_radius + 2;\r\n        this.$bar_progress = createSVG('rect', {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.progress_width,\r\n            height: this.height,\r\n            rx: r,\r\n            ry: r,\r\n            class: 'bar-progress',\r\n            append_to: this.bar_group,\r\n        });\r\n        if (this.task.color_progress)\r\n            this.$bar_progress.style.fill = this.task.color;\r\n        const x =\r\n            (date_utils.diff(\r\n                this.task._start,\r\n                this.gantt.gantt_start,\r\n                this.gantt.config.unit,\r\n            ) /\r\n                this.gantt.config.step) *\r\n            this.gantt.config.column_width;\r\n\r\n        let $date_highlight = this.gantt.create_el({\r\n            classes: `date-range-highlight hide highlight-${this.task.id}`,\r\n            width: this.width,\r\n            left: x,\r\n        });\r\n        this.$date_highlight = $date_highlight;\r\n        this.gantt.$lower_header.prepend(this.$date_highlight);\r\n\r\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\r\n    }\r\n\r\n    calculate_progress_width() {\r\n        const width = this.$bar.getWidth();\r\n        const ignored_end = this.x + width;\r\n        const total_ignored_area =\r\n            this.gantt.config.ignored_positions.reduce((acc, val) => {\r\n                return acc + (val >= this.x && val < ignored_end);\r\n            }, 0) * this.gantt.config.column_width;\r\n        let progress_width =\r\n            ((width - total_ignored_area) * this.task.progress) / 100;\r\n        const progress_end = this.x + progress_width;\r\n        const total_ignored_progress =\r\n            this.gantt.config.ignored_positions.reduce((acc, val) => {\r\n                return acc + (val >= this.x && val < progress_end);\r\n            }, 0) * this.gantt.config.column_width;\r\n\r\n        progress_width += total_ignored_progress;\r\n\r\n        let ignored_regions = this.gantt.get_ignored_region(\r\n            this.x + progress_width,\r\n        );\r\n\r\n        while (ignored_regions.length) {\r\n            progress_width += this.gantt.config.column_width;\r\n            ignored_regions = this.gantt.get_ignored_region(\r\n                this.x + progress_width,\r\n            );\r\n        }\r\n        this.progress_width = progress_width;\r\n        return progress_width;\r\n    }\r\n\r\n    draw_label() {\r\n        let x_coord = this.x + this.$bar.getWidth() / 2;\r\n\r\n        if (this.task.thumbnail) {\r\n            x_coord = this.x + this.image_size + 5;\r\n        }\r\n\r\n        createSVG('text', {\r\n            x: x_coord,\r\n            y: this.y + this.height / 2,\r\n            innerHTML: this.task.name,\r\n            class: 'bar-label',\r\n            append_to: this.bar_group,\r\n        });\r\n        // labels get BBox in the next tick\r\n        requestAnimationFrame(() => this.update_label_position());\r\n    }\r\n\r\n    draw_thumbnail() {\r\n        let x_offset = 10,\r\n            y_offset = 2;\r\n        let defs, clipPath;\r\n\r\n        defs = createSVG('defs', {\r\n            append_to: this.bar_group,\r\n        });\r\n\r\n        createSVG('rect', {\r\n            id: 'rect_' + this.task.id,\r\n            x: this.x + x_offset,\r\n            y: this.y + y_offset,\r\n            width: this.image_size,\r\n            height: this.image_size,\r\n            rx: '15',\r\n            class: 'img_mask',\r\n            append_to: defs,\r\n        });\r\n\r\n        clipPath = createSVG('clipPath', {\r\n            id: 'clip_' + this.task.id,\r\n            append_to: defs,\r\n        });\r\n\r\n        createSVG('use', {\r\n            href: '#rect_' + this.task.id,\r\n            append_to: clipPath,\r\n        });\r\n\r\n        createSVG('image', {\r\n            x: this.x + x_offset,\r\n            y: this.y + y_offset,\r\n            width: this.image_size,\r\n            height: this.image_size,\r\n            class: 'bar-img',\r\n            href: this.task.thumbnail,\r\n            clipPath: 'clip_' + this.task.id,\r\n            append_to: this.bar_group,\r\n        });\r\n    }\r\n\r\n    draw_resize_handles() {\r\n        if (this.invalid || this.gantt.options.readonly) return;\r\n\r\n        const bar = this.$bar;\r\n        const handle_width = 3;\r\n        this.handles = [];\r\n        if (!this.gantt.options.readonly_dates) {\r\n            this.handles.push(\r\n                createSVG('rect', {\r\n                    x: bar.getEndX() - handle_width / 2,\r\n                    y: bar.getY() + this.height / 4,\r\n                    width: handle_width,\r\n                    height: this.height / 2,\r\n                    rx: 2,\r\n                    ry: 2,\r\n                    class: 'handle right',\r\n                    append_to: this.handle_group,\r\n                }),\r\n            );\r\n\r\n            this.handles.push(\r\n                createSVG('rect', {\r\n                    x: bar.getX() - handle_width / 2,\r\n                    y: bar.getY() + this.height / 4,\r\n                    width: handle_width,\r\n                    height: this.height / 2,\r\n                    rx: 2,\r\n                    ry: 2,\r\n                    class: 'handle left',\r\n                    append_to: this.handle_group,\r\n                }),\r\n            );\r\n        }\r\n        if (!this.gantt.options.readonly_progress) {\r\n            const bar_progress = this.$bar_progress;\r\n            this.$handle_progress = createSVG('circle', {\r\n                cx: bar_progress.getEndX(),\r\n                cy: bar_progress.getY() + bar_progress.getHeight() / 2,\r\n                r: 4.5,\r\n                class: 'handle progress',\r\n                append_to: this.handle_group,\r\n            });\r\n            this.handles.push(this.$handle_progress);\r\n        }\r\n\r\n        for (let handle of this.handles) {\r\n            $.on(handle, 'mouseenter', () => handle.classList.add('active'));\r\n            $.on(handle, 'mouseleave', () => handle.classList.remove('active'));\r\n        }\r\n    }\r\n\r\n    bind() {\r\n        if (this.invalid) return;\r\n        this.setup_click_event();\r\n    }\r\n\r\n    setup_click_event() {\r\n        let task_id = this.task.id;\r\n        $.on(this.group, 'mouseover', (e) => {\r\n            this.gantt.trigger_event('hover', [\r\n                this.task,\r\n                e.screenX,\r\n                e.screenY,\r\n                e,\r\n            ]);\r\n        });\r\n\r\n        if (this.gantt.options.popup_on === 'click') {\r\n            $.on(this.group, 'mouseup', (e) => {\r\n                const posX = e.offsetX || e.layerX;\r\n                if (this.$handle_progress) {\r\n                    const cx = +this.$handle_progress.getAttribute('cx');\r\n                    if (cx > posX - 1 && cx < posX + 1) return;\r\n                    if (this.gantt.bar_being_dragged) return;\r\n                }\r\n                this.gantt.show_popup({\r\n                    x: e.offsetX || e.layerX,\r\n                    y: e.offsetY || e.layerY,\r\n                    task: this.task,\r\n                    target: this.$bar,\r\n                });\r\n            });\r\n        }\r\n        let timeout;\r\n        $.on(this.group, 'mouseenter', (e) => {\r\n            timeout = setTimeout(() => {\r\n                if (this.gantt.options.popup_on === 'hover')\r\n                    this.gantt.show_popup({\r\n                        x: e.offsetX || e.layerX,\r\n                        y: e.offsetY || e.layerY,\r\n                        task: this.task,\r\n                        target: this.$bar,\r\n                    });\r\n                this.gantt.$container\r\n                    .querySelector(`.highlight-${task_id}`)\r\n                    .classList.remove('hide');\r\n            }, 200);\r\n        });\r\n        $.on(this.group, 'mouseleave', () => {\r\n            clearTimeout(timeout);\r\n            if (this.gantt.options.popup_on === 'hover')\r\n                this.gantt.popup?.hide?.();\r\n            this.gantt.$container\r\n                .querySelector(`.highlight-${task_id}`)\r\n                .classList.add('hide');\r\n        });\r\n\r\n        $.on(this.group, 'click', () => {\r\n            this.gantt.trigger_event('click', [this.task]);\r\n        });\r\n\r\n        $.on(this.group, 'dblclick', (e) => {\r\n            if (this.action_completed) {\r\n                // just finished a move action, wait for a few seconds\r\n                return;\r\n            }\r\n            this.group.classList.remove('active');\r\n            if (this.gantt.popup)\r\n                this.gantt.popup.parent.classList.remove('hide');\r\n\r\n            this.gantt.trigger_event('double_click', [this.task]);\r\n        });\r\n    }\r\n\r\n    update_bar_position({ x = null, width = null }) {\r\n        const bar = this.$bar;\r\n\r\n        if (x) {\r\n            const xs = this.task.dependencies.map((dep) => {\r\n                return this.gantt.get_bar(dep).$bar.getX();\r\n            });\r\n            const valid_x = xs.reduce((prev, curr) => {\r\n                return prev && x >= curr;\r\n            }, true);\r\n            if (!valid_x) return;\r\n            this.update_attr(bar, 'x', x);\r\n            this.x = x;\r\n            this.$date_highlight.style.left = x + 'px';\r\n        }\r\n        if (width > 0) {\r\n            this.update_attr(bar, 'width', width);\r\n            this.$date_highlight.style.width = width + 'px';\r\n        }\r\n\r\n        this.update_label_position();\r\n        this.update_handle_position();\r\n        this.date_changed();\r\n        this.compute_duration();\r\n        if(this.gantt.options.show_baseline)\r\n            this.compute_baseline_duration()\r\n\r\n        if (this.gantt.options.show_expected_progress) {\r\n            this.update_expected_progressbar_position();\r\n        }\r\n\r\n        this.update_progressbar_position();\r\n        this.update_arrow_position();\r\n    }\r\n\r\n    update_label_position_on_horizontal_scroll({ x, sx }) {\r\n        const container =\r\n            this.gantt.$container.querySelector('.gantt-container');\r\n        const label = this.group.querySelector('.bar-label');\r\n        const img = this.group.querySelector('.bar-img') || '';\r\n        const img_mask = this.bar_group.querySelector('.img_mask') || '';\r\n\r\n        let barWidthLimit = this.$bar.getX() + this.$bar.getWidth();\r\n        let newLabelX = label.getX() + x;\r\n        let newImgX = (img && img.getX() + x) || 0;\r\n        let imgWidth = (img && img.getBBox().width + 7) || 7;\r\n        let labelEndX = newLabelX + label.getBBox().width + 7;\r\n        let viewportCentral = sx + container.clientWidth / 2;\r\n\r\n        if (label.classList.contains('big')) return;\r\n\r\n        if (labelEndX < barWidthLimit && x > 0 && labelEndX < viewportCentral) {\r\n            label.setAttribute('x', newLabelX);\r\n            if (img) {\r\n                img.setAttribute('x', newImgX);\r\n                img_mask.setAttribute('x', newImgX);\r\n            }\r\n        } else if (\r\n            newLabelX - imgWidth > this.$bar.getX() &&\r\n            x < 0 &&\r\n            labelEndX > viewportCentral\r\n        ) {\r\n            label.setAttribute('x', newLabelX);\r\n            if (img) {\r\n                img.setAttribute('x', newImgX);\r\n                img_mask.setAttribute('x', newImgX);\r\n            }\r\n        }\r\n    }\r\n\r\n    date_changed() {\r\n        let changed = false;\r\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\r\n        if (Number(this.task._start) !== Number(new_start_date)) {\r\n            changed = true;\r\n            this.task._start = new_start_date;\r\n        }\r\n\r\n        if (Number(this.task._end) !== Number(new_end_date)) {\r\n            changed = true;\r\n            this.task._end = new_end_date;\r\n        }\r\n\r\n        if (!changed) return;\r\n\r\n        this.gantt.trigger_event('date_change', [\r\n            this.task,\r\n            new_start_date,\r\n            date_utils.add(new_end_date, -1, 'second'),\r\n        ]);\r\n    }\r\n\r\n    progress_changed() {\r\n        this.task.progress = this.compute_progress();\r\n        this.gantt.trigger_event('progress_change', [\r\n            this.task,\r\n            this.task.progress,\r\n        ]);\r\n    }\r\n\r\n    set_action_completed() {\r\n        this.action_completed = true;\r\n        setTimeout(() => (this.action_completed = false), 1000);\r\n    }\r\n\r\n    compute_start_end_date() {\r\n        const bar = this.$bar;\r\n        const x_in_units = bar.getX() / this.gantt.config.column_width;\r\n        let new_start_date = date_utils.add(\r\n            this.gantt.gantt_start,\r\n            x_in_units * this.gantt.config.step,\r\n            this.gantt.config.unit,\r\n        );\r\n\r\n        const width_in_units = bar.getWidth() / this.gantt.config.column_width;\r\n        const new_end_date = date_utils.add(\r\n            new_start_date,\r\n            width_in_units * this.gantt.config.step,\r\n            this.gantt.config.unit,\r\n        );\r\n\r\n        return { new_start_date, new_end_date };\r\n    }\r\n\r\n    compute_progress() {\r\n        this.progress_width = this.$bar_progress.getWidth();\r\n        this.x = this.$bar_progress.getBBox().x;\r\n        const progress_area = this.x + this.progress_width;\r\n        const progress =\r\n            this.progress_width -\r\n            this.gantt.config.ignored_positions.reduce((acc, val) => {\r\n                return acc + (val >= this.x && val <= progress_area);\r\n            }, 0) *\r\n                this.gantt.config.column_width;\r\n        if (progress < 0) return 0;\r\n        const total =\r\n            this.$bar.getWidth() -\r\n            this.ignored_duration_raw * this.gantt.config.column_width;\r\n        return parseInt((progress / total) * 100, 10);\r\n    }\r\n\r\n    compute_expected_progress() {\r\n        this.expected_progress =\r\n            date_utils.diff(date_utils.today(), this.task._start, 'hour') /\r\n            this.gantt.config.step;\r\n        this.expected_progress =\r\n            ((this.expected_progress < this.duration\r\n                ? this.expected_progress\r\n                : this.duration) *\r\n                100) /\r\n            this.duration;\r\n    }\r\n\r\n    compute_x() {\r\n        const { column_width } = this.gantt.config;\r\n        const task_start = this.task._start;\r\n        const gantt_start = this.gantt.gantt_start;\r\n\r\n        const diff =\r\n            date_utils.diff(task_start, gantt_start, this.gantt.config.unit) /\r\n            this.gantt.config.step;\r\n\r\n        let x = diff * column_width;\r\n\r\n        /* Since the column width is based on 30,\r\n        we count the month-difference, multiply it by 30 for a \"pseudo-month\"\r\n        and then add the days in the month, making sure the number does not exceed 29\r\n        so it is within the column */\r\n\r\n        // if (this.gantt.view_is('Month')) {\r\n        //     const diffDaysBasedOn30DayMonths =\r\n        //         date_utils.diff(task_start, gantt_start, 'month') * 30;\r\n        //     const dayInMonth = Math.min(\r\n        //         29,\r\n        //         date_utils.format(\r\n        //             task_start,\r\n        //             'DD',\r\n        //             this.gantt.options.language,\r\n        //         ),\r\n        //     );\r\n        //     const diff = diffDaysBasedOn30DayMonths + dayInMonth;\r\n\r\n        //     x = (diff * column_width) / 30;\r\n        // }\r\n\r\n        this.x = x;\r\n\r\n        if(this.task.baseline){\r\n            const m_baseline_start = this.task._baseline_start;\r\n\r\n            const diff =\r\n                date_utils.diff(m_baseline_start, gantt_start, this.gantt.config.unit) /\r\n                this.gantt.config.step;\r\n            this.baseline_x = diff * column_width;\r\n        }\r\n    }\r\n\r\n    compute_y() {\r\n        this.y =\r\n            this.gantt.config.header_height +\r\n            this.gantt.options.padding / 2 +\r\n            this.task._index * (this.height + this.gantt.options.padding);\r\n\r\n        if(this.task.baseline  && this.gantt.options.show_baseline){\r\n            this.baseline_y =\r\n            this.gantt.config.header_height +\r\n            this.gantt.options.padding / 2 +\r\n            this.task._index * (this.height + this.gantt.options.padding);\r\n\r\n            this.baseline_y = this.baseline_y + this.height - 4;\r\n        }\r\n    }\r\n\r\n    compute_duration() {\r\n        let actual_duration_in_days = 0,\r\n            duration_in_days = 0;\r\n        for (\r\n            let d = new Date(this.task._start);\r\n            d < this.task._end;\r\n            d.setDate(d.getDate() + 1)\r\n        ) {\r\n            duration_in_days++;\r\n            if (\r\n                !this.gantt.config.ignored_dates.find(\r\n                    (k) => k.getTime() === d.getTime(),\r\n                ) &&\r\n                (!this.gantt.config.ignored_function ||\r\n                    !this.gantt.config.ignored_function(d))\r\n            ) {\r\n                actual_duration_in_days++;\r\n            }\r\n        }\r\n        this.task.actual_duration = actual_duration_in_days;\r\n        this.task.ignored_duration = duration_in_days - actual_duration_in_days;\r\n\r\n        this.duration =\r\n            date_utils.convert_scales(\r\n                duration_in_days + 'd',\r\n                this.gantt.config.unit,\r\n            ) / this.gantt.config.step;\r\n        \r\n       \r\n        this.actual_duration_raw =\r\n            date_utils.convert_scales(\r\n                actual_duration_in_days + 'd',\r\n                this.gantt.config.unit,\r\n            ) / this.gantt.config.step;\r\n\r\n        this.ignored_duration_raw = this.duration - this.actual_duration_raw;\r\n    }\r\n\r\n    compute_baseline_duration() {\r\n        if(!this.task.baseline || !this.gantt.options.show_baseline){\r\n            return;\r\n        }\r\n        let actual_duration_in_days = 0,\r\n            duration_in_days = 0;\r\n        for (\r\n            let d = new Date(this.task._baseline_start);\r\n            d < this.task._baseline_end;\r\n            d.setDate(d.getDate() + 1)\r\n        ) {\r\n            duration_in_days++;\r\n            if (\r\n                !this.gantt.config.ignored_dates.find(\r\n                    (k) => k.getTime() === d.getTime(),\r\n                ) &&\r\n                (!this.gantt.config.ignored_function ||\r\n                    !this.gantt.config.ignored_function(d))\r\n            ) {\r\n                actual_duration_in_days++;\r\n            }\r\n        }\r\n        this.task.actual_baseline_duration = actual_duration_in_days;\r\n        this.task.ignored_baseline_duration = duration_in_days - actual_duration_in_days;\r\n\r\n        this.baseline_duration =\r\n            date_utils.convert_scales(\r\n                duration_in_days + 'd',\r\n                this.gantt.config.unit,\r\n            ) / this.gantt.config.step;\r\n        \r\n       \r\n        this.actual_baseline_duration_raw =\r\n            date_utils.convert_scales(\r\n                actual_duration_in_days + 'd',\r\n                this.gantt.config.unit,\r\n            ) / this.gantt.config.step;\r\n\r\n        this.ignored_baseline_duration_raw = this.baseline_duration - this.actual_baseline_duration_raw;\r\n    }\r\n\r\n    update_attr(element, attr, value) {\r\n        value = +value;\r\n        if (!isNaN(value)) {\r\n            element.setAttribute(attr, value);\r\n        }\r\n        return element;\r\n    }\r\n\r\n    update_expected_progressbar_position() {\r\n        if (this.invalid) return;\r\n        this.$expected_bar_progress.setAttribute('x', this.$bar.getX());\r\n        this.compute_expected_progress();\r\n        this.$expected_bar_progress.setAttribute(\r\n            'width',\r\n            this.gantt.config.column_width *\r\n                this.actual_duration_raw *\r\n                (this.expected_progress / 100) || 0,\r\n        );\r\n    }\r\n\r\n    update_progressbar_position() {\r\n        if (this.invalid || this.gantt.options.readonly) return;\r\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\r\n\r\n        this.$bar_progress.setAttribute(\r\n            'width',\r\n            this.calculate_progress_width(),\r\n        );\r\n    }\r\n\r\n    update_label_position() {\r\n        const img_mask = this.bar_group.querySelector('.img_mask') || '';\r\n        const bar = this.$bar,\r\n            label = this.group.querySelector('.bar-label'),\r\n            img = this.group.querySelector('.bar-img');\r\n\r\n        let padding = 5;\r\n        let x_offset_label_img = this.image_size + 10;\r\n        const labelWidth = label.getBBox().width;\r\n        const barWidth = bar.getWidth();\r\n        if (labelWidth > barWidth) {\r\n            label.classList.add('big');\r\n            if (img) {\r\n                img.setAttribute('x', bar.getEndX() + padding);\r\n                img_mask.setAttribute('x', bar.getEndX() + padding);\r\n                label.setAttribute('x', bar.getEndX() + x_offset_label_img);\r\n            } else {\r\n                label.setAttribute('x', bar.getEndX() + padding);\r\n            }\r\n        } else {\r\n            label.classList.remove('big');\r\n            if (img) {\r\n                img.setAttribute('x', bar.getX() + padding);\r\n                img_mask.setAttribute('x', bar.getX() + padding);\r\n                label.setAttribute(\r\n                    'x',\r\n                    bar.getX() + barWidth / 2 + x_offset_label_img,\r\n                );\r\n            } else {\r\n                label.setAttribute(\r\n                    'x',\r\n                    bar.getX() + barWidth / 2 - labelWidth / 2,\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    update_handle_position() {\r\n        if (this.invalid || this.gantt.options.readonly) return;\r\n        const bar = this.$bar;\r\n        this.handle_group\r\n            .querySelector('.handle.left')\r\n            .setAttribute('x', bar.getX());\r\n        this.handle_group\r\n            .querySelector('.handle.right')\r\n            .setAttribute('x', bar.getEndX());\r\n        const handle = this.group.querySelector('.handle.progress');\r\n        handle && handle.setAttribute('cx', this.$bar_progress.getEndX());\r\n    }\r\n\r\n    update_arrow_position() {\r\n        this.arrows = this.arrows || [];\r\n        for (let arrow of this.arrows) {\r\n            arrow.update();\r\n        }\r\n    }\r\n}\r\n","export default class Popup {\r\n    constructor(parent, popup_func, gantt) {\r\n        this.parent = parent;\r\n        this.popup_func = popup_func;\r\n        this.gantt = gantt;\r\n\r\n        this.make();\r\n    }\r\n\r\n    make() {\r\n        this.parent.innerHTML = `\r\n            <div class=\"title\"></div>\r\n            <div class=\"subtitle\"></div>\r\n            <div class=\"details\"></div>\r\n            <div class=\"actions\"></div>\r\n        `;\r\n        this.hide();\r\n\r\n        this.title = this.parent.querySelector('.title');\r\n        this.subtitle = this.parent.querySelector('.subtitle');\r\n        this.details = this.parent.querySelector('.details');\r\n        this.actions = this.parent.querySelector('.actions');\r\n    }\r\n\r\n    show({ x, y, task, target }) {\r\n        this.actions.innerHTML = '';\r\n        let html = this.popup_func({\r\n            task,\r\n            chart: this.gantt,\r\n            get_title: () => this.title,\r\n            set_title: (title) => (this.title.innerHTML = title),\r\n            get_subtitle: () => this.subtitle,\r\n            set_subtitle: (subtitle) => (this.subtitle.innerHTML = subtitle),\r\n            get_details: () => this.details,\r\n            set_details: (details) => (this.details.innerHTML = details),\r\n            add_action: (html, func) => {\r\n                let action = this.gantt.create_el({\r\n                    classes: 'action-btn',\r\n                    type: 'button',\r\n                    append_to: this.actions,\r\n                });\r\n                if (typeof html === 'function') html = html(task);\r\n                action.innerHTML = html;\r\n                action.onclick = (e) => func(task, this.gantt, e);\r\n            },\r\n        });\r\n        if (html === false) return;\r\n        if (html) this.parent.innerHTML = html;\r\n\r\n        if (this.actions.innerHTML === '') this.actions.remove();\r\n        else this.parent.appendChild(this.actions);\r\n\r\n        this.parent.style.left = x + 10 + 'px';\r\n        this.parent.style.top = y - 10 + 'px';\r\n        this.parent.classList.remove('hide');\r\n    }\r\n\r\n    hide() {\r\n        this.parent.classList.add('hide');\r\n    }\r\n}\r\n","import date_utils from './date_utils';\r\n\r\nfunction getDecade(d) {\r\n    const year = d.getFullYear();\r\n    return year - (year % 10) + '';\r\n}\r\n\r\nfunction formatWeek(d, ld, lang) {\r\n    let endOfWeek = date_utils.add(d, 6, 'day');\r\n    let endFormat = endOfWeek.getMonth() !== d.getMonth() ? 'D MMM' : 'D';\r\n    let beginFormat = !ld || d.getMonth() !== ld.getMonth() ? 'D MMM' : 'D';\r\n    return `${date_utils.format(d, beginFormat, lang)} - ${date_utils.format(endOfWeek, endFormat, lang)}`;\r\n}\r\n\r\nconst DEFAULT_VIEW_MODES = [\r\n    /*{\r\n        name: 'Hour',\r\n        padding: '7d',\r\n        step: '1h',\r\n        date_format: 'YYYY-MM-DD HH:',\r\n        lower_text: 'HH',\r\n        upper_text: (d, ld, lang) =>\r\n            !ld || d.getDate() !== ld.getDate()\r\n                ? date_utils.format(d, 'D MMMM', lang)\r\n                : '',\r\n        upper_text_frequency: 24,\r\n    },\r\n    {\r\n        name: 'Quarter Day',\r\n        padding: '7d',\r\n        step: '6h',\r\n        date_format: 'YYYY-MM-DD HH:',\r\n        lower_text: 'HH',\r\n        upper_text: (d, ld, lang) =>\r\n            !ld || d.getDate() !== ld.getDate()\r\n                ? date_utils.format(d, 'D MMM', lang)\r\n                : '',\r\n        upper_text_frequency: 4,\r\n    },\r\n    {\r\n        name: 'Half Day',\r\n        padding: '14d',\r\n        step: '12h',\r\n        date_format: 'YYYY-MM-DD HH:',\r\n        lower_text: 'HH',\r\n        upper_text: (d, ld, lang) =>\r\n            !ld || d.getDate() !== ld.getDate()\r\n                ? d.getMonth() !== d.getMonth()\r\n                    ? date_utils.format(d, 'D MMM', lang)\r\n                    : date_utils.format(d, 'D', lang)\r\n                : '',\r\n        upper_text_frequency: 2,\r\n    },*/\r\n    {\r\n        name: 'Day',\r\n        padding: '7d',\r\n        date_format: 'YYYY-MM-DD',\r\n        step: '1d',\r\n        lower_text: (d, ld, lang) =>\r\n            !ld || d.getDate() !== ld.getDate()\r\n                ? date_utils.format(d, 'D', lang)\r\n                : '',\r\n        upper_text: (d, ld, lang) =>\r\n            !ld || d.getMonth() !== ld.getMonth()\r\n                ? date_utils.format(d, 'MMMM', lang)\r\n                : '',\r\n        thick_line: (d) => d.getDay() === 1,\r\n    },\r\n    {\r\n        name: 'Week',\r\n        padding: '1m',\r\n        step: '7d',\r\n        date_format: 'YYYY-MM-DD',\r\n        column_width: 140,\r\n        lower_text: formatWeek,\r\n        upper_text: (d, ld, lang) =>\r\n            !ld || d.getMonth() !== ld.getMonth()\r\n                ? date_utils.format(d, 'MMMM', lang)\r\n                : '',\r\n        thick_line: (d) => d.getDate() >= 1 && d.getDate() <= 7,\r\n        upper_text_frequency: 4,\r\n    },\r\n    {\r\n        name: 'Month',\r\n        padding: '2m',\r\n        step: '1m',\r\n        column_width: 120,\r\n        date_format: 'YYYY-MM',\r\n        lower_text: 'MMMM',\r\n        upper_text: (d, ld, lang) =>\r\n            !ld || d.getFullYear() !== ld.getFullYear()\r\n                ? date_utils.format(d, 'YYYY', lang)\r\n                : '',\r\n        thick_line: (d) => d.getMonth() % 3 === 0,\r\n        snap_at: '7d',\r\n    },\r\n    {\r\n        name: 'Year',\r\n        padding: '2y',\r\n        step: '1y',\r\n        column_width: 120,\r\n        date_format: 'YYYY',\r\n        upper_text: (d, ld, lang) =>\r\n            !ld || getDecade(d) !== getDecade(ld) ? getDecade(d) : '',\r\n        lower_text: 'YYYY',\r\n        snap_at: '30d',\r\n    },\r\n];\r\n\r\nconst DEFAULT_OPTIONS = {\r\n    arrow_curve: 5,\r\n    auto_move_label: false,\r\n    bar_corner_radius: 3,\r\n    bar_height: 30,\r\n    container_height: 'auto',\r\n    column_width: null,\r\n    date_format: 'YYYY-MM-DD HH:mm',\r\n    upper_header_height: 45,\r\n    lower_header_height: 30,\r\n    snap_at: null,\r\n    infinite_padding: true,\r\n    holidays: { 'var(--g-weekend-highlight-color)': 'weekend' },\r\n    ignore: [],\r\n    language: 'en',\r\n    lines: 'both',\r\n    move_dependencies: true,\r\n    padding: 18,\r\n    popup: (ctx) => {\r\n        ctx.set_title(ctx.task.name);\r\n        if (ctx.task.description) ctx.set_subtitle(ctx.task.description);\r\n        else ctx.set_subtitle('');\r\n\r\n        const start_date = date_utils.format(\r\n            ctx.task._start,\r\n            'MMM D',\r\n            ctx.chart.options.language,\r\n        );\r\n        const end_date = date_utils.format(\r\n            date_utils.add(ctx.task._end, -1, 'second'),\r\n            'MMM D',\r\n            ctx.chart.options.language,\r\n        );\r\n\r\n        ctx.set_details(\r\n            `${start_date} - ${end_date} (${ctx.task.actual_duration} days${ctx.task.ignored_duration ? ' + ' + ctx.task.ignored_duration + ' excluded' : ''})<br/>Progress: ${Math.floor(ctx.task.progress * 100) / 100}%`,\r\n        );\r\n    },\r\n    popup_on: 'click',\r\n    readonly_progress: false,\r\n    readonly_dates: false,\r\n    readonly: false,\r\n    scroll_to: 'today',\r\n    show_expected_progress: false,\r\n    today_button: true,\r\n    view_mode: 'Day',\r\n    view_mode_select: false,\r\n    view_modes: DEFAULT_VIEW_MODES,\r\n};\r\n\r\nexport { DEFAULT_OPTIONS, DEFAULT_VIEW_MODES };\r\n","import date_utils from './date_utils';\r\nimport { $, createSVG } from './svg_utils';\r\n\r\nimport Arrow from './arrow';\r\nimport Bar from './bar';\r\nimport Popup from './popup';\r\n\r\nimport { DEFAULT_OPTIONS, DEFAULT_VIEW_MODES } from './defaults';\r\n\r\nimport './styles/gantt.css';\r\n\r\nexport default class Gantt {\r\n    constructor(wrapper, tasks, options) {\r\n        this.setup_wrapper(wrapper);\r\n        this.setup_options(options);\r\n        this.setup_tasks(tasks);\r\n        this.change_view_mode();\r\n        this.bind_events();    \r\n    }\r\n\r\n    setup_wrapper(element) {\r\n        let svg_element, wrapper_element;\r\n\r\n        // CSS Selector is passed\r\n        if (typeof element === 'string') {\r\n            let el = document.querySelector(element);\r\n            if (!el) {\r\n                throw new ReferenceError(\r\n                    `CSS selector \"${element}\" could not be found in DOM`,\r\n                );\r\n            }\r\n            element = el;\r\n        }\r\n\r\n        // get the SVGElement\r\n        if (element instanceof HTMLElement) {\r\n            wrapper_element = element;\r\n            svg_element = element.querySelector('svg');\r\n        } else if (element instanceof SVGElement) {\r\n            svg_element = element;\r\n        } else {\r\n            throw new TypeError(\r\n                'Frappe Gantt only supports usage of a string CSS selector,' +\r\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\",\r\n            );\r\n        }\r\n\r\n        // svg element\r\n        if (!svg_element) {\r\n            // create it\r\n            this.$svg = createSVG('svg', {\r\n                append_to: wrapper_element,\r\n                class: 'gantt',\r\n            });\r\n        } else {\r\n            this.$svg = svg_element;\r\n            this.$svg.classList.add('gantt');\r\n        }\r\n\r\n        // wrapper element\r\n        this.$container = this.create_el({\r\n            classes: 'gantt-container',\r\n            append_to: this.$svg.parentElement,\r\n        });\r\n\r\n        this.$container.appendChild(this.$svg);\r\n        this.$popup_wrapper = this.create_el({\r\n            classes: 'popup-wrapper',\r\n            append_to: this.$container,\r\n        });\r\n    }\r\n\r\n    setup_options(options) {\r\n        this.original_options = options;\r\n        this.options = { ...DEFAULT_OPTIONS, ...options };\r\n        const CSS_VARIABLES = {\r\n            'grid-height': 'container_height',\r\n            'bar-height': 'bar_height',\r\n            'lower-header-height': 'lower_header_height',\r\n            'upper-header-height': 'upper_header_height',\r\n        };\r\n        for (let name in CSS_VARIABLES) {\r\n            let setting = this.options[CSS_VARIABLES[name]];\r\n            if (setting !== 'auto')\r\n                this.$container.style.setProperty(\r\n                    '--gv-' + name,\r\n                    setting + 'px',\r\n                );\r\n        }\r\n\r\n        if(this.options.height)\r\n        {\r\n            this.$container.style.setProperty('height',this.options.height );\r\n        }\r\n\r\n        this.config = {\r\n            ignored_dates: [],\r\n            ignored_positions: [],\r\n            extend_by_units: 10,\r\n        };\r\n\r\n        if (typeof this.options.ignore !== 'function') {\r\n            if (typeof this.options.ignore === 'string')\r\n                this.options.ignore = [this.options.ignord];\r\n            for (let option of this.options.ignore) {\r\n                if (typeof option === 'function') {\r\n                    this.config.ignored_function = option;\r\n                    continue;\r\n                }\r\n                if (typeof option === 'string') {\r\n                    if (option === 'weekend')\r\n                        this.config.ignored_function = (d) =>\r\n                            d.getDay() == 6 || d.getDay() == 0;\r\n                    else this.config.ignored_dates.push(new Date(option + ' '));\r\n                }\r\n            }\r\n        } else {\r\n            this.config.ignored_function = this.options.ignore;\r\n        }\r\n    }\r\n\r\n    update_options(options) {\r\n        this.setup_options({ ...this.original_options, ...options });\r\n        this.change_view_mode(undefined, true);\r\n    }\r\n\r\n    setup_tasks(tasks) {\r\n        this.tasks = tasks\r\n            .map((task, i) => {\r\n                if (!task.start) {\r\n                    console.error(\r\n                        `task \"${task.id}\" doesn't have a start date`,\r\n                    );\r\n                    return false;\r\n                }\r\n\r\n                task._start = date_utils.parse(task.start);\r\n                if (task.end === undefined && task.duration !== undefined) {\r\n                    task.end = task._start;\r\n                    let durations = task.duration.split(' ');\r\n\r\n                    durations.forEach((tmpDuration) => {\r\n                        let { duration, scale } =\r\n                            date_utils.parse_duration(tmpDuration);\r\n                        task.end = date_utils.add(task.end, duration, scale);\r\n                    });\r\n                }\r\n                if (!task.end) {\r\n                    console.error(`task \"${task.id}\" doesn't have an end date`);\r\n                    return false;\r\n                }\r\n                task._end = date_utils.parse(task.end);\r\n\r\n                let diff = date_utils.diff(task._end, task._start, 'year');\r\n                if (diff < 0) {\r\n                    console.error(\r\n                        `start of task can't be after end of task: in task \"${task.id}\"`,\r\n                    );\r\n                    return false;\r\n                }\r\n\r\n                // make task invalid if duration too large\r\n                if (date_utils.diff(task._end, task._start, 'year') > 10) {\r\n                    console.error(\r\n                        `the duration of task \"${task.id}\" is too long (above ten years)`,\r\n                    );\r\n                    return false;\r\n                }\r\n\r\n                // cache index\r\n                task._index = i;\r\n\r\n                // if hours is not set, assume the last day is full day\r\n                // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\r\n                const task_end_values = date_utils.get_date_values(task._end);\r\n                if (task_end_values.slice(3).every((d) => d === 0)) {\r\n                    task._end = date_utils.add(task._end, 24, 'hour');\r\n                }\r\n\r\n                // dependencies\r\n                if (\r\n                    typeof task.dependencies === 'string' ||\r\n                    !task.dependencies\r\n                ) {\r\n                    let deps = [];\r\n                    if (task.dependencies) {\r\n                        deps = task.dependencies\r\n                            .split(',')\r\n                            .map((d) => d.trim().replaceAll(' ', '_'))\r\n                            .filter((d) => d);\r\n                    }\r\n                    task.dependencies = deps;\r\n                }\r\n\r\n                // uids\r\n                if (!task.id) {\r\n                    task.id = generate_id(task);\r\n                } else if (typeof task.id === 'string') {\r\n                    task.id = task.id.replaceAll(' ', '_');\r\n                } else {\r\n                    task.id = `${task.id}`;\r\n                }\r\n\r\n                // baseline\r\n                if(task.baseline && this.options.show_baseline)\r\n                {\r\n                    if (!task.baseline_start) {\r\n                        console.error(\r\n                            `task \"${task.id}\" doesn't have a baseline start date`,\r\n                        );\r\n                        return false;\r\n                    }\r\n    \r\n                    task._baseline_start = date_utils.parse(task.baseline_start);\r\n                    if (task.baseline_end === undefined && task.baseline_duration !== undefined) {\r\n                        task.baseline_end = task._baseline_start;\r\n                        let durations = task.baseline_duration.split(' ');\r\n    \r\n                        durations.forEach((tmpDuration) => {\r\n                            let { duration, scale } =\r\n                                date_utils.parse_duration(tmpDuration);\r\n                            task.baseline_end = date_utils.add(task.baseline_end, duration, scale);\r\n                        });\r\n                    }\r\n                    if (!task.baseline_end) {\r\n                        console.error(`task \"${task.id}\" doesn't have an baseline end date`);\r\n                        return false;\r\n                    }\r\n                    task._baseline_end = date_utils.parse(task.baseline_end);\r\n    \r\n                    let diff = date_utils.diff(task._baseline_end, task._baseline_start, 'year');\r\n                    if (diff < 0) {\r\n                        console.error(\r\n                            `Baseline start of task can't be after end of task: in task \"${task.id}\"`,\r\n                        );\r\n                        return false;\r\n                    }\r\n    \r\n                    // make task invalid if duration too large\r\n                    if (date_utils.diff(task._baseline_end, task._baseline_start, 'year') > 10) {\r\n                        console.error(\r\n                            `the duration baseline of  task \"${task.id}\" is too long (above ten years)`,\r\n                        );\r\n                        return false;\r\n                    }\r\n                    // if hours is not set, assume the last day is full day\r\n                    // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\r\n                    const task_end_values = date_utils.get_date_values(task._baseline_end);\r\n                    if (task_end_values.slice(3).every((d) => d === 0)) {\r\n                        task._baseline_end = date_utils.add(task._baseline_end, 24, 'hour');\r\n                    }\r\n                }\r\n                return task;\r\n            })\r\n            .filter((t) => t);\r\n        this.setup_dependencies();\r\n    }\r\n\r\n    setup_dependencies() {\r\n        this.dependency_map = {};\r\n        for (let t of this.tasks) {\r\n            for (let d of t.dependencies) {\r\n                this.dependency_map[d] = this.dependency_map[d] || [];\r\n                this.dependency_map[d].push(t.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    refresh(tasks) {\r\n        this.setup_tasks(tasks);\r\n        this.change_view_mode();\r\n    }\r\n\r\n    update_task(id, new_details) {\r\n        let task = this.tasks.find((t) => t.id === id);\r\n        let bar = this.bars[task._index];\r\n        Object.assign(task, new_details);\r\n        bar.refresh();\r\n    }\r\n\r\n    change_view_mode(mode = this.options.view_mode, maintain_pos = false) {\r\n        if (typeof mode === 'string') {\r\n            mode = this.options.view_modes.find((d) => d.name === mode);\r\n        }\r\n        let old_pos, old_scroll_op;\r\n        if (maintain_pos) {\r\n            old_pos = this.$container.scrollLeft;\r\n            old_scroll_op = this.options.scroll_to;\r\n            this.options.scroll_to = null;\r\n        }\r\n        this.options.view_mode = mode.name;\r\n        this.config.view_mode = mode;\r\n        this.update_view_scale(mode);\r\n        this.setup_dates(maintain_pos);\r\n        this.render();\r\n        if (maintain_pos) {\r\n            this.$container.scrollLeft = old_pos;\r\n            this.options.scroll_to = old_scroll_op;\r\n        }\r\n        this.trigger_event('view_change', [mode]);\r\n\r\n        if(this.options.height)\r\n        {\r\n            this.$container.style.setProperty('height',this.options.height );\r\n        }\r\n    }\r\n\r\n    update_view_scale(mode) {\r\n        let { duration, scale } = date_utils.parse_duration(mode.step);\r\n        this.config.step = duration;\r\n        this.config.unit = scale;\r\n        this.config.column_width =\r\n            this.options.column_width || mode.column_width || 45;\r\n        this.$container.style.setProperty(\r\n            '--gv-column-width',\r\n            this.config.column_width + 'px',\r\n        );\r\n        this.config.header_height =\r\n            this.options.lower_header_height +\r\n            this.options.upper_header_height +\r\n            10;\r\n    }\r\n\r\n    setup_dates(refresh = false) {\r\n        this.setup_gantt_dates(refresh);\r\n        this.setup_date_values();\r\n    }\r\n\r\n    setup_gantt_dates(refresh) {\r\n        let gantt_start, gantt_end;\r\n        if (!this.tasks.length) {\r\n            gantt_start = new Date();\r\n            gantt_end = new Date();\r\n        }\r\n\r\n        for (let task of this.tasks) {\r\n            if (!gantt_start || task._start < gantt_start) {\r\n                gantt_start = task._start;\r\n            }\r\n            if (!gantt_end || task._end > gantt_end) {\r\n                gantt_end = task._end;\r\n            }\r\n        }\r\n\r\n        gantt_start = date_utils.start_of(gantt_start, this.config.unit);\r\n        gantt_end = date_utils.start_of(gantt_end, this.config.unit);\r\n\r\n        if (!refresh) {\r\n            if (!this.options.infinite_padding) {\r\n                if (typeof this.config.view_mode.padding === 'string')\r\n                    this.config.view_mode.padding = [\r\n                        this.config.view_mode.padding,\r\n                        this.config.view_mode.padding,\r\n                    ];\r\n\r\n                let [padding_start, padding_end] =\r\n                    this.config.view_mode.padding.map(\r\n                        date_utils.parse_duration,\r\n                    );\r\n                this.gantt_start = date_utils.add(\r\n                    gantt_start,\r\n                    -padding_start.duration,\r\n                    padding_start.scale,\r\n                );\r\n                this.gantt_end = date_utils.add(\r\n                    gantt_end,\r\n                    padding_end.duration,\r\n                    padding_end.scale,\r\n                );\r\n            } else {\r\n                this.gantt_start = date_utils.add(\r\n                    gantt_start,\r\n                    -this.config.extend_by_units * 3,\r\n                    this.config.unit,\r\n                );\r\n                this.gantt_end = date_utils.add(\r\n                    gantt_end,\r\n                    this.config.extend_by_units * 3,\r\n                    this.config.unit,\r\n                );\r\n            }\r\n        }\r\n        this.config.date_format =\r\n            this.config.view_mode.date_format || this.options.date_format;\r\n        this.gantt_start.setHours(0, 0, 0, 0);\r\n    }\r\n\r\n    setup_date_values() {\r\n        let cur_date = this.gantt_start;\r\n        this.dates = [cur_date];\r\n\r\n        while (cur_date < this.gantt_end) {\r\n            cur_date = date_utils.add(\r\n                cur_date,\r\n                this.config.step,\r\n                this.config.unit,\r\n            );\r\n            this.dates.push(cur_date);\r\n        }\r\n    }\r\n\r\n    bind_events() {\r\n        this.bind_grid_click();\r\n        this.bind_holiday_labels();\r\n        this.bind_bar_events();\r\n    }\r\n\r\n    render() {\r\n        this.clear();\r\n        this.setup_layers();\r\n        this.make_grid();\r\n        this.make_dates();\r\n        this.make_grid_extras();\r\n        this.make_bars();\r\n        this.make_arrows();\r\n        this.map_arrows_on_bars();\r\n        this.set_dimensions();\r\n        this.set_scroll_position(this.options.scroll_to);\r\n    }\r\n\r\n    setup_layers() {\r\n        this.layers = {};\r\n        const layers = ['grid', 'arrow', 'progress', 'bar'];\r\n        // make group layers\r\n        for (let layer of layers) {\r\n            this.layers[layer] = createSVG('g', {\r\n                class: layer,\r\n                append_to: this.$svg,\r\n            });\r\n        }\r\n        this.$extras = this.create_el({\r\n            classes: 'extras',\r\n            append_to: this.$container,\r\n        });\r\n        this.$adjust = this.create_el({\r\n            classes: 'adjust hide',\r\n            append_to: this.$extras,\r\n            type: 'button',\r\n        });\r\n        this.$adjust.innerHTML = '&larr;';\r\n    }\r\n\r\n    make_grid() {\r\n        this.make_grid_background();\r\n        this.make_grid_rows();\r\n        this.make_grid_header();\r\n        this.make_side_header();\r\n    }\r\n\r\n    make_grid_extras() {\r\n        this.make_grid_highlights();\r\n        this.make_grid_ticks();\r\n    }\r\n\r\n    make_grid_background() {\r\n        const grid_width = this.dates.length * this.config.column_width;\r\n        const grid_height = Math.max(\r\n            this.config.header_height +\r\n                this.options.padding +\r\n                (this.options.bar_height + this.options.padding) *\r\n                    this.tasks.length -\r\n                10,\r\n            this.options.container_height !== 'auto'\r\n                ? this.options.container_height\r\n                : 0,\r\n        );\r\n\r\n        createSVG('rect', {\r\n            x: 0,\r\n            y: 0,\r\n            width: grid_width,\r\n            height: grid_height,\r\n            class: 'grid-background',\r\n            append_to: this.$svg,\r\n        });\r\n\r\n        $.attr(this.$svg, {\r\n            height: grid_height,\r\n            width: '100%',\r\n        });\r\n        this.grid_height = grid_height;\r\n        if (this.options.container_height === 'auto')\r\n            this.$container.style.height = grid_height + 'px';\r\n    }\r\n\r\n    make_grid_rows() {\r\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\r\n\r\n        const row_width = this.dates.length * this.config.column_width;\r\n        const row_height = this.options.bar_height + this.options.padding;\r\n\r\n        let y = this.config.header_height;\r\n        for (\r\n            let y = this.config.header_height;\r\n            y < this.grid_height;\r\n            y += row_height\r\n        ) {\r\n            createSVG('rect', {\r\n                x: 0,\r\n                y,\r\n                width: row_width,\r\n                height: row_height,\r\n                class: 'grid-row',\r\n                append_to: rows_layer,\r\n            });\r\n        }\r\n    }\r\n\r\n    make_grid_header() {\r\n        this.$header = this.create_el({\r\n            width: this.dates.length * this.config.column_width,\r\n            classes: 'grid-header',\r\n            append_to: this.$container,\r\n        });\r\n\r\n        this.$upper_header = this.create_el({\r\n            classes: 'upper-header',\r\n            append_to: this.$header,\r\n        });\r\n        this.$lower_header = this.create_el({\r\n            classes: 'lower-header',\r\n            append_to: this.$header,\r\n        });\r\n    }\r\n\r\n    make_side_header() {\r\n        this.$side_header = this.create_el({ classes: 'side-header' });\r\n        this.$upper_header.prepend(this.$side_header);\r\n\r\n        // Create view mode change select\r\n        if (this.options.view_mode_select) {\r\n            const $select = document.createElement('select');\r\n            $select.classList.add('viewmode-select');\r\n\r\n            const $el = document.createElement('option');\r\n            $el.selected = true;\r\n            $el.disabled = true;\r\n            $el.textContent = 'Mode';\r\n            $select.appendChild($el);\r\n\r\n            for (const mode of this.options.view_modes) {\r\n                const $option = document.createElement('option');\r\n                $option.value = mode.name;\r\n                $option.textContent = mode.name;\r\n                if (mode.name === this.config.view_mode.name)\r\n                    $option.selected = true;\r\n                $select.appendChild($option);\r\n            }\r\n\r\n            $select.addEventListener(\r\n                'change',\r\n                function () {\r\n                    this.change_view_mode($select.value, true);\r\n                }.bind(this),\r\n            );\r\n            this.$side_header.appendChild($select);\r\n        }\r\n\r\n        // Create today button\r\n        if (this.options.today_button) {\r\n            let $today_button = document.createElement('button');\r\n            $today_button.classList.add('today-button');\r\n            $today_button.textContent = 'Today';\r\n            $today_button.onclick = this.scroll_current.bind(this);\r\n            this.$side_header.prepend($today_button);\r\n            this.$today_button = $today_button;\r\n        }\r\n    }\r\n\r\n    make_grid_ticks() {\r\n        if (this.options.lines === 'none') return;\r\n        let tick_x = 0;\r\n        let tick_y = this.config.header_height;\r\n        let tick_height = this.grid_height - this.config.header_height;\r\n\r\n        let $lines_layer = createSVG('g', {\r\n            class: 'lines_layer',\r\n            append_to: this.layers.grid,\r\n        });\r\n\r\n        let row_y = this.config.header_height;\r\n\r\n        const row_width = this.dates.length * this.config.column_width;\r\n        const row_height = this.options.bar_height + this.options.padding;\r\n        if (this.options.lines !== 'vertical') {\r\n            for (\r\n                let y = this.config.header_height;\r\n                y < this.grid_height;\r\n                y += row_height\r\n            ) {\r\n                createSVG('line', {\r\n                    x1: 0,\r\n                    y1: row_y + row_height,\r\n                    x2: row_width,\r\n                    y2: row_y + row_height,\r\n                    class: 'row-line',\r\n                    append_to: $lines_layer,\r\n                });\r\n                row_y += row_height;\r\n            }\r\n        }\r\n        if (this.options.lines === 'horizontal') return;\r\n\r\n        for (let date of this.dates) {\r\n            let tick_class = 'tick';\r\n            if (\r\n                this.config.view_mode.thick_line &&\r\n                this.config.view_mode.thick_line(date)\r\n            ) {\r\n                tick_class += ' thick';\r\n            }\r\n\r\n            createSVG('path', {\r\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\r\n                class: tick_class,\r\n                append_to: this.layers.grid,\r\n            });\r\n\r\n            if (this.view_is('month')) {\r\n                tick_x +=\r\n                    (date_utils.get_days_in_month(date) *\r\n                        this.config.column_width) /\r\n                    30;\r\n            } else if (this.view_is('year')) {\r\n                tick_x +=\r\n                    (date_utils.get_days_in_year(date) *\r\n                        this.config.column_width) /\r\n                    365;\r\n            } else {\r\n                tick_x += this.config.column_width;\r\n            }\r\n        }\r\n    }\r\n\r\n    highlight_holidays() {\r\n        let labels = {};\r\n        if (!this.options.holidays) return;\r\n\r\n        for (let color in this.options.holidays) {\r\n            let check_highlight = this.options.holidays[color];\r\n            if (check_highlight === 'weekend')\r\n                check_highlight = (d) => d.getDay() === 0 || d.getDay() === 6;\r\n            let extra_func;\r\n\r\n            if (typeof check_highlight === 'object') {\r\n                let f = check_highlight.find((k) => typeof k === 'function');\r\n                if (f) {\r\n                    extra_func = f;\r\n                }\r\n                if (this.options.holidays.name) {\r\n                    let dateObj = new Date(check_highlight.date + ' ');\r\n                    check_highlight = (d) => dateObj.getTime() === d.getTime();\r\n                    labels[dateObj] = check_highlight.name;\r\n                } else {\r\n                    check_highlight = (d) =>\r\n                        this.options.holidays[color]\r\n                            .filter((k) => typeof k !== 'function')\r\n                            .map((k) => {\r\n                                if (k.name) {\r\n                                    let dateObj = new Date(k.date + ' ');\r\n                                    labels[dateObj] = k.name;\r\n                                    return dateObj.getTime();\r\n                                }\r\n                                return new Date(k + ' ').getTime();\r\n                            })\r\n                            .includes(d.getTime());\r\n                }\r\n            }\r\n            for (\r\n                let d = new Date(this.gantt_start);\r\n                d <= this.gantt_end;\r\n                d.setDate(d.getDate() + 1)\r\n            ) {\r\n                if (\r\n                    this.config.ignored_dates.find(\r\n                        (k) => k.getTime() == d.getTime(),\r\n                    ) ||\r\n                    (this.config.ignored_function &&\r\n                        this.config.ignored_function(d))\r\n                )\r\n                    continue;\r\n                if (check_highlight(d) || (extra_func && extra_func(d))) {\r\n                    const x =\r\n                        (date_utils.diff(\r\n                            d,\r\n                            this.gantt_start,\r\n                            this.config.unit,\r\n                        ) /\r\n                            this.config.step) *\r\n                        this.config.column_width;\r\n                    const height = this.grid_height - this.config.header_height;\r\n                    const d_formatted = date_utils\r\n                        .format(d, 'YYYY-MM-DD', this.options.language)\r\n                        .replace(' ', '_');\r\n\r\n                    if (labels[d]) {\r\n                        let label = this.create_el({\r\n                            classes: 'holiday-label ' + 'label_' + d_formatted,\r\n                            append_to: this.$extras,\r\n                        });\r\n                        label.textContent = labels[d];\r\n                    }\r\n                    createSVG('rect', {\r\n                        x: Math.round(x),\r\n                        y: this.config.header_height,\r\n                        width:\r\n                            this.config.column_width /\r\n                            date_utils.convert_scales(\r\n                                this.config.view_mode.step,\r\n                                'day',\r\n                            ),\r\n                        height,\r\n                        class: 'holiday-highlight ' + d_formatted,\r\n                        style: `fill: ${color};`,\r\n                        append_to: this.layers.grid,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute the horizontal x-axis distance and associated date for the current date and view.\r\n     *\r\n     * @returns Object containing the x-axis distance and date of the current date, or null if the current date is out of the gantt range.\r\n     */\r\n    highlight_current() {\r\n        const res = this.get_closest_date();\r\n        if (!res) return;\r\n\r\n        const [_, el] = res;\r\n        el.classList.add('current-date-highlight');\r\n\r\n        const diff_in_units = date_utils.diff(\r\n            new Date(),\r\n            this.gantt_start,\r\n            this.config.unit,\r\n        );\r\n\r\n        const left =\r\n            (diff_in_units / this.config.step) * this.config.column_width;\r\n\r\n        this.$current_highlight = this.create_el({\r\n            top: this.config.header_height,\r\n            left,\r\n            height: this.grid_height - this.config.header_height,\r\n            classes: 'current-highlight',\r\n            append_to: this.$container,\r\n        });\r\n        this.$current_ball_highlight = this.create_el({\r\n            top: this.config.header_height - 6,\r\n            left: left - 2.5,\r\n            width: 6,\r\n            height: 6,\r\n            classes: 'current-ball-highlight',\r\n            append_to: this.$header,\r\n        });\r\n    }\r\n\r\n    make_grid_highlights() {\r\n        this.highlight_holidays();\r\n        this.config.ignored_positions = [];\r\n\r\n        const height =\r\n            (this.options.bar_height + this.options.padding) *\r\n            this.tasks.length;\r\n        this.layers.grid.innerHTML += `<pattern id=\"diagonalHatch\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\">\r\n          <path d=\"M-1,1 l2,-2\r\n                   M0,4 l4,-4\r\n                   M3,5 l2,-2\"\r\n                style=\"stroke:grey; stroke-width:0.3\" />\r\n        </pattern>`;\r\n\r\n        for (\r\n            let d = new Date(this.gantt_start);\r\n            d <= this.gantt_end;\r\n            d.setDate(d.getDate() + 1)\r\n        ) {\r\n            if (\r\n                !this.config.ignored_dates.find(\r\n                    (k) => k.getTime() == d.getTime(),\r\n                ) &&\r\n                (!this.config.ignored_function ||\r\n                    !this.config.ignored_function(d))\r\n            )\r\n                continue;\r\n            let diff =\r\n                date_utils.convert_scales(\r\n                    date_utils.diff(d, this.gantt_start) + 'd',\r\n                    this.config.unit,\r\n                ) / this.config.step;\r\n\r\n            this.config.ignored_positions.push(diff * this.config.column_width);\r\n            createSVG('rect', {\r\n                x: diff * this.config.column_width,\r\n                y: this.config.header_height,\r\n                width: this.config.column_width,\r\n                height: height,\r\n                class: 'ignored-bar',\r\n                style: 'fill: url(#diagonalHatch);',\r\n                append_to: this.$svg,\r\n            });\r\n        }\r\n\r\n        const highlightDimensions = this.highlight_current(\r\n            this.config.view_mode,\r\n        );\r\n\r\n        if (!highlightDimensions) return;\r\n    }\r\n\r\n    create_el({ left, top, width, height, id, classes, append_to, type }) {\r\n        let $el = document.createElement(type || 'div');\r\n        for (let cls of classes.split(' ')) $el.classList.add(cls);\r\n        $el.style.top = top + 'px';\r\n        $el.style.left = left + 'px';\r\n        if (id) $el.id = id;\r\n        if (width) $el.style.width = width + 'px';\r\n        if (height) $el.style.height = height + 'px';\r\n        if (append_to) append_to.appendChild($el);\r\n        return $el;\r\n    }\r\n\r\n    make_dates() {\r\n        this.get_dates_to_draw().forEach((date, i) => {\r\n            if (date.lower_text) {\r\n                let $lower_text = this.create_el({\r\n                    left: date.x,\r\n                    top: date.lower_y,\r\n                    classes: 'lower-text date_' + sanitize(date.formatted_date),\r\n                    append_to: this.$lower_header,\r\n                });\r\n                $lower_text.innerText = date.lower_text;\r\n            }\r\n\r\n            if (date.upper_text) {\r\n                let $upper_text = this.create_el({\r\n                    left: date.x,\r\n                    top: date.upper_y,\r\n                    classes: 'upper-text',\r\n                    append_to: this.$upper_header,\r\n                });\r\n                $upper_text.innerText = date.upper_text;\r\n            }\r\n        });\r\n        this.upperTexts = Array.from(\r\n            this.$container.querySelectorAll('.upper-text'),\r\n        );\r\n    }\r\n\r\n    get_dates_to_draw() {\r\n        let last_date_info = null;\r\n        const dates = this.dates.map((date, i) => {\r\n            const d = this.get_date_info(date, last_date_info, i);\r\n            last_date_info = d;\r\n            return d;\r\n        });\r\n        return dates;\r\n    }\r\n\r\n    get_date_info(date, last_date_info) {\r\n        let last_date = last_date_info ? last_date_info.date : null;\r\n\r\n        let column_width = this.config.column_width;\r\n\r\n        const x = last_date_info\r\n            ? last_date_info.x + last_date_info.column_width\r\n            : 0;\r\n\r\n        let upper_text = this.config.view_mode.upper_text;\r\n        let lower_text = this.config.view_mode.lower_text;\r\n\r\n        if (!upper_text) {\r\n            this.config.view_mode.upper_text = () => '';\r\n        } else if (typeof upper_text === 'string') {\r\n            this.config.view_mode.upper_text = (date) =>\r\n                date_utils.format(date, upper_text, this.options.language);\r\n        }\r\n\r\n        if (!lower_text) {\r\n            this.config.view_mode.lower_text = () => '';\r\n        } else if (typeof lower_text === 'string') {\r\n            this.config.view_mode.lower_text = (date) =>\r\n                date_utils.format(date, lower_text, this.options.language);\r\n        }\r\n\r\n        return {\r\n            date,\r\n            formatted_date: sanitize(\r\n                date_utils.format(\r\n                    date,\r\n                    this.config.date_format,\r\n                    this.options.language,\r\n                ),\r\n            ),\r\n            column_width: this.config.column_width,\r\n            x,\r\n            upper_text: this.config.view_mode.upper_text(\r\n                date,\r\n                last_date,\r\n                this.options.language,\r\n            ),\r\n            lower_text: this.config.view_mode.lower_text(\r\n                date,\r\n                last_date,\r\n                this.options.language,\r\n            ),\r\n            upper_y: 17,\r\n            lower_y: this.options.upper_header_height + 5,\r\n        };\r\n    }\r\n\r\n    make_bars() {\r\n        this.bars = this.tasks.map((task) => {\r\n            const bar = new Bar(this, task);\r\n            this.layers.bar.appendChild(bar.group);\r\n            return bar;\r\n        });\r\n    }\r\n\r\n    make_arrows() {\r\n        this.arrows = [];\r\n        for (let task of this.tasks) {\r\n            let arrows = [];\r\n            arrows = task.dependencies\r\n                .map((task_id) => {\r\n                    const dependency = this.get_task(task_id);\r\n                    if (!dependency) return;\r\n                    const arrow = new Arrow(\r\n                        this,\r\n                        this.bars[dependency._index], // from_task\r\n                        this.bars[task._index], // to_task\r\n                    );\r\n                    this.layers.arrow.appendChild(arrow.element);\r\n                    return arrow;\r\n                })\r\n                .filter(Boolean); // filter falsy values\r\n            this.arrows = this.arrows.concat(arrows);\r\n        }\r\n    }\r\n\r\n    map_arrows_on_bars() {\r\n        for (let bar of this.bars) {\r\n            bar.arrows = this.arrows.filter((arrow) => {\r\n                return (\r\n                    arrow.from_task.task.id === bar.task.id ||\r\n                    arrow.to_task.task.id === bar.task.id\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    set_dimensions() {\r\n        const { width: cur_width } = this.$svg.getBoundingClientRect();\r\n        const actual_width = this.$svg.querySelector('.grid .grid-row')\r\n            ? this.$svg.querySelector('.grid .grid-row').getAttribute('width')\r\n            : 0;\r\n        if (cur_width < actual_width) {\r\n            this.$svg.setAttribute('width', actual_width);\r\n        }\r\n    }\r\n\r\n    set_scroll_position(date) {\r\n        if (this.options.infinite_padding && (!date || date === 'start')) {\r\n            let [min_start, ..._] = this.get_start_end_positions();\r\n            this.$container.scrollLeft = min_start;\r\n            return;\r\n        }\r\n        if (!date || date === 'start') {\r\n            date = this.gantt_start;\r\n        } else if (date === 'end') {\r\n            date = this.gantt_end;\r\n        } else if (date === 'today') {\r\n            return this.scroll_current();\r\n        } else if (typeof date === 'string') {\r\n            date = date_utils.parse(date);\r\n        }\r\n\r\n        // Weird bug where infinite padding results in one day offset in scroll\r\n        // Related to header-body displacement\r\n        const units_since_first_task = date_utils.diff(\r\n            date,\r\n            this.gantt_start,\r\n            this.config.unit,\r\n        );\r\n        const scroll_pos =\r\n            (units_since_first_task / this.config.step) *\r\n            this.config.column_width;\r\n\r\n        this.$container.scrollTo({\r\n            left: scroll_pos - this.config.column_width / 6,\r\n            behavior: 'smooth',\r\n        });\r\n\r\n        // Calculate current scroll position's upper text\r\n        if (this.$current) {\r\n            this.$current.classList.remove('current-upper');\r\n        }\r\n\r\n        this.current_date = date_utils.add(\r\n            this.gantt_start,\r\n            this.$container.scrollLeft / this.config.column_width,\r\n            this.config.unit,\r\n        );\r\n\r\n        let current_upper = this.config.view_mode.upper_text(\r\n            this.current_date,\r\n            null,\r\n            this.options.language,\r\n        );\r\n        let $el = this.upperTexts.find(\r\n            (el) => el.textContent === current_upper,\r\n        );\r\n\r\n        // Recalculate\r\n        this.current_date = date_utils.add(\r\n            this.gantt_start,\r\n            (this.$container.scrollLeft + $el.clientWidth) /\r\n                this.config.column_width,\r\n            this.config.unit,\r\n        );\r\n        current_upper = this.config.view_mode.upper_text(\r\n            this.current_date,\r\n            null,\r\n            this.options.language,\r\n        );\r\n        $el = this.upperTexts.find((el) => el.textContent === current_upper);\r\n        $el.classList.add('current-upper');\r\n        this.$current = $el;\r\n    }\r\n\r\n    scroll_current() {\r\n        let res = this.get_closest_date();\r\n        if (res) this.set_scroll_position(res[0]);\r\n    }\r\n\r\n    get_closest_date() {\r\n        let now = new Date();\r\n        if (now < this.gantt_start || now > this.gantt_end) return null;\r\n\r\n        let current = new Date(),\r\n            el = this.$container.querySelector(\r\n                '.date_' +\r\n                    sanitize(\r\n                        date_utils.format(\r\n                            current,\r\n                            this.config.date_format,\r\n                            this.options.language,\r\n                        ),\r\n                    ),\r\n            );\r\n\r\n        // safety check to prevent infinite loop\r\n        let c = 0;\r\n        while (!el && c < this.config.step) {\r\n            current = date_utils.add(current, -1, this.config.unit);\r\n            el = this.$container.querySelector(\r\n                '.date_' +\r\n                    sanitize(\r\n                        date_utils.format(\r\n                            current,\r\n                            this.config.date_format,\r\n                            this.options.language,\r\n                        ),\r\n                    ),\r\n            );\r\n            c++;\r\n        }\r\n        return [\r\n            new Date(\r\n                date_utils.format(\r\n                    current,\r\n                    this.config.date_format,\r\n                    this.options.language,\r\n                ) + ' ',\r\n            ),\r\n            el,\r\n        ];\r\n    }\r\n\r\n    bind_grid_click() {\r\n        $.on(\r\n            this.$container,\r\n            'click',\r\n            '.grid-row, .grid-header, .ignored-bar, .holiday-highlight',\r\n            () => {\r\n                this.unselect_all();\r\n                this.hide_popup();\r\n            },\r\n        );\r\n    }\r\n\r\n    bind_holiday_labels() {\r\n        const $highlights =\r\n            this.$container.querySelectorAll('.holiday-highlight');\r\n        for (let h of $highlights) {\r\n            const label = this.$container.querySelector(\r\n                '.label_' + h.classList[1],\r\n            );\r\n            if (!label) continue;\r\n            let timeout;\r\n            h.onmouseenter = (e) => {\r\n                timeout = setTimeout(() => {\r\n                    label.classList.add('show');\r\n                    label.style.left = (e.offsetX || e.layerX) + 'px';\r\n                    label.style.top = (e.offsetY || e.layerY) + 'px';\r\n                }, 300);\r\n            };\r\n\r\n            h.onmouseleave = (e) => {\r\n                clearTimeout(timeout);\r\n                label.classList.remove('show');\r\n            };\r\n        }\r\n    }\r\n\r\n    get_start_end_positions() {\r\n        if (!this.bars.length) return [0, 0, 0];\r\n        let { x, width } = this.bars[0].group.getBBox();\r\n        let min_start = x;\r\n        let max_start = x;\r\n        let max_end = x + width;\r\n        Array.prototype.forEach.call(this.bars, function ({ group }, i) {\r\n            let { x, width } = group.getBBox();\r\n            if (x < min_start) min_start = x;\r\n            if (x > max_start) max_start = x;\r\n            if (x + width > max_end) max_end = x + width;\r\n        });\r\n        return [min_start, max_start, max_end];\r\n    }\r\n\r\n    bind_bar_events() {\r\n        let is_dragging = false;\r\n        let x_on_start = 0;\r\n        let x_on_scroll_start = 0;\r\n        let y_on_start = 0;\r\n        let is_resizing_left = false;\r\n        let is_resizing_right = false;\r\n        let parent_bar_id = null;\r\n        let bars = []; // instanceof Bar\r\n        this.bar_being_dragged = null;\r\n\r\n        const action_in_progress = () =>\r\n            is_dragging || is_resizing_left || is_resizing_right;\r\n\r\n        this.$svg.onclick = (e) => {\r\n            if (e.target.classList.contains('grid-row')) this.unselect_all();\r\n        };\r\n\r\n        let pos = 0;\r\n        $.on(this.$svg, 'mousemove', '.bar-wrapper, .handle', (e) => {\r\n            if (\r\n                this.bar_being_dragged === false &&\r\n                Math.abs((e.offsetX || e.layerX) - pos) > 10\r\n            )\r\n                this.bar_being_dragged = true;\r\n        });\r\n\r\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\r\n            const bar_wrapper = $.closest('.bar-wrapper', element);\r\n            if (element.classList.contains('left')) {\r\n                is_resizing_left = true;\r\n                element.classList.add('visible');\r\n            } else if (element.classList.contains('right')) {\r\n                is_resizing_right = true;\r\n                element.classList.add('visible');\r\n            } else if (element.classList.contains('bar-wrapper')) {\r\n                is_dragging = true;\r\n            }\r\n\r\n            if (this.popup) this.popup.hide();\r\n\r\n            x_on_start = e.offsetX || e.layerX;\r\n            y_on_start = e.offsetY || e.layerY;\r\n\r\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\r\n            let ids;\r\n            if (this.options.move_dependencies) {\r\n                ids = [\r\n                    parent_bar_id,\r\n                    ...this.get_all_dependent_tasks(parent_bar_id),\r\n                ];\r\n            } else {\r\n                ids = [parent_bar_id];\r\n            }\r\n            bars = ids.map((id) => this.get_bar(id));\r\n\r\n            this.bar_being_dragged = false;\r\n            pos = x_on_start;\r\n\r\n            bars.forEach((bar) => {\r\n                const $bar = bar.$bar;\r\n                $bar.ox = $bar.getX();\r\n                $bar.oy = $bar.getY();\r\n                $bar.owidth = $bar.getWidth();\r\n                $bar.finaldx = 0;\r\n            });\r\n        });\r\n\r\n        if (this.options.infinite_padding) {\r\n            let extended = false;\r\n            $.on(this.$container, 'mousewheel', (e) => {\r\n                let trigger = this.$container.scrollWidth / 2;\r\n                if (!extended && e.currentTarget.scrollLeft <= trigger) {\r\n                    let old_scroll_left = e.currentTarget.scrollLeft;\r\n                    extended = true;\r\n\r\n                    this.gantt_start = date_utils.add(\r\n                        this.gantt_start,\r\n                        -this.config.extend_by_units,\r\n                        this.config.unit,\r\n                    );\r\n                    this.setup_date_values();\r\n                    this.render();\r\n                    e.currentTarget.scrollLeft =\r\n                        old_scroll_left +\r\n                        this.config.column_width * this.config.extend_by_units;\r\n                    setTimeout(() => (extended = false), 300);\r\n                }\r\n\r\n                if (\r\n                    !extended &&\r\n                    e.currentTarget.scrollWidth -\r\n                        (e.currentTarget.scrollLeft +\r\n                            e.currentTarget.clientWidth) <=\r\n                        trigger\r\n                ) {\r\n                    let old_scroll_left = e.currentTarget.scrollLeft;\r\n                    extended = true;\r\n                    this.gantt_end = date_utils.add(\r\n                        this.gantt_end,\r\n                        this.config.extend_by_units,\r\n                        this.config.unit,\r\n                    );\r\n                    this.setup_date_values();\r\n                    this.render();\r\n                    e.currentTarget.scrollLeft = old_scroll_left;\r\n                    setTimeout(() => (extended = false), 300);\r\n                }\r\n            });\r\n        }\r\n\r\n        $.on(this.$container, 'scroll', (e) => {\r\n            let localBars = [];\r\n            const ids = this.bars.map(({ group }) =>\r\n                group.getAttribute('data-id'),\r\n            );\r\n            let dx;\r\n            if (x_on_scroll_start) {\r\n                dx = e.currentTarget.scrollLeft - x_on_scroll_start;\r\n            }\r\n\r\n            // Calculate current scroll position's upper text\r\n            this.current_date = date_utils.add(\r\n                this.gantt_start,\r\n                (e.currentTarget.scrollLeft / this.config.column_width) *\r\n                    this.config.step,\r\n                this.config.unit,\r\n            );\r\n\r\n            let current_upper = this.config.view_mode.upper_text(\r\n                this.current_date,\r\n                null,\r\n                this.options.language,\r\n            );\r\n            let $el = this.upperTexts.find(\r\n                (el) => el.textContent === current_upper,\r\n            );\r\n\r\n            // Recalculate for smoother experience\r\n            this.current_date = date_utils.add(\r\n                this.gantt_start,\r\n                ((e.currentTarget.scrollLeft + $el.clientWidth) /\r\n                    this.config.column_width) *\r\n                    this.config.step,\r\n                this.config.unit,\r\n            );\r\n            current_upper = this.config.view_mode.upper_text(\r\n                this.current_date,\r\n                null,\r\n                this.options.language,\r\n            );\r\n            $el = this.upperTexts.find(\r\n                (el) => el.textContent === current_upper,\r\n            );\r\n\r\n            if ($el !== this.$current) {\r\n                if (this.$current)\r\n                    this.$current.classList.remove('current-upper');\r\n\r\n                $el.classList.add('current-upper');\r\n                this.$current = $el;\r\n            }\r\n\r\n            x_on_scroll_start = e.currentTarget.scrollLeft;\r\n            let [min_start, max_start, max_end] =\r\n                this.get_start_end_positions();\r\n\r\n            if (x_on_scroll_start > max_end + 100) {\r\n                this.$adjust.innerHTML = '&larr;';\r\n                this.$adjust.classList.remove('hide');\r\n                this.$adjust.onclick = () => {\r\n                    this.$container.scrollTo({\r\n                        left: max_start,\r\n                        behavior: 'smooth',\r\n                    });\r\n                };\r\n            } else if (\r\n                x_on_scroll_start + e.currentTarget.offsetWidth <\r\n                min_start - 100\r\n            ) {\r\n                this.$adjust.innerHTML = '&rarr;';\r\n                this.$adjust.classList.remove('hide');\r\n                this.$adjust.onclick = () => {\r\n                    this.$container.scrollTo({\r\n                        left: min_start,\r\n                        behavior: 'smooth',\r\n                    });\r\n                };\r\n            } else {\r\n                this.$adjust.classList.add('hide');\r\n            }\r\n\r\n            if (dx) {\r\n                localBars = ids.map((id) => this.get_bar(id));\r\n                if (this.options.auto_move_label) {\r\n                    localBars.forEach((bar) => {\r\n                        bar.update_label_position_on_horizontal_scroll({\r\n                            x: dx,\r\n                            sx: e.currentTarget.scrollLeft,\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        $.on(this.$svg, 'mousemove', (e) => {\r\n            if (!action_in_progress()) return;\r\n            const dx = (e.offsetX || e.layerX) - x_on_start;\r\n\r\n            bars.forEach((bar) => {\r\n                const $bar = bar.$bar;\r\n                $bar.finaldx = this.get_snap_position(dx, $bar.ox);\r\n                this.hide_popup();\r\n                if (is_resizing_left) {\r\n                    if (parent_bar_id === bar.task.id) {\r\n                        bar.update_bar_position({\r\n                            x: $bar.ox + $bar.finaldx,\r\n                            width: $bar.owidth - $bar.finaldx,\r\n                        });\r\n                    } else {\r\n                        bar.update_bar_position({\r\n                            x: $bar.ox + $bar.finaldx,\r\n                        });\r\n                    }\r\n                } else if (is_resizing_right) {\r\n                    if (parent_bar_id === bar.task.id) {\r\n                        bar.update_bar_position({\r\n                            width: $bar.owidth + $bar.finaldx,\r\n                        });\r\n                    }\r\n                } else if (\r\n                    is_dragging &&\r\n                    !this.options.readonly &&\r\n                    !this.options.readonly_dates\r\n                ) {\r\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\r\n                }\r\n            });\r\n        });\r\n\r\n        document.addEventListener('mouseup', () => {\r\n            is_dragging = false;\r\n            is_resizing_left = false;\r\n            is_resizing_right = false;\r\n            this.$container\r\n                .querySelector('.visible')\r\n                ?.classList?.remove?.('visible');\r\n        });\r\n\r\n        $.on(this.$svg, 'mouseup', (e) => {\r\n            this.bar_being_dragged = null;\r\n            bars.forEach((bar) => {\r\n                const $bar = bar.$bar;\r\n                if (!$bar.finaldx) return;\r\n                bar.date_changed();\r\n                bar.compute_progress();\r\n                bar.set_action_completed();\r\n            });\r\n        });\r\n\r\n        this.bind_bar_progress();\r\n    }\r\n\r\n    bind_bar_progress() {\r\n        let x_on_start = 0;\r\n        let is_resizing = null;\r\n        let bar = null;\r\n        let $bar_progress = null;\r\n        let $bar = null;\r\n\r\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\r\n            is_resizing = true;\r\n            x_on_start = e.offsetX || e.layerX;\r\n            y_on_start = e.offsetY || e.layerY;\r\n\r\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\r\n            const id = $bar_wrapper.getAttribute('data-id');\r\n            bar = this.get_bar(id);\r\n\r\n            $bar_progress = bar.$bar_progress;\r\n            $bar = bar.$bar;\r\n\r\n            $bar_progress.finaldx = 0;\r\n            $bar_progress.owidth = $bar_progress.getWidth();\r\n            $bar_progress.min_dx = -$bar_progress.owidth;\r\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\r\n        });\r\n\r\n        const range_positions = this.config.ignored_positions.map((d) => [\r\n            d,\r\n            d + this.config.column_width,\r\n        ]);\r\n\r\n        $.on(this.$svg, 'mousemove', (e) => {\r\n            if (!is_resizing) return;\r\n            let now_x = e.offsetX || e.layerX;\r\n\r\n            let moving_right = now_x > x_on_start;\r\n            if (moving_right) {\r\n                let k = range_positions.find(\r\n                    ([begin, end]) => now_x >= begin && now_x < end,\r\n                );\r\n                while (k) {\r\n                    now_x = k[1];\r\n                    k = range_positions.find(\r\n                        ([begin, end]) => now_x >= begin && now_x < end,\r\n                    );\r\n                }\r\n            } else {\r\n                let k = range_positions.find(\r\n                    ([begin, end]) => now_x > begin && now_x <= end,\r\n                );\r\n                while (k) {\r\n                    now_x = k[0];\r\n                    k = range_positions.find(\r\n                        ([begin, end]) => now_x > begin && now_x <= end,\r\n                    );\r\n                }\r\n            }\r\n\r\n            let dx = now_x - x_on_start;\r\n            if (dx > $bar_progress.max_dx) {\r\n                dx = $bar_progress.max_dx;\r\n            }\r\n            if (dx < $bar_progress.min_dx) {\r\n                dx = $bar_progress.min_dx;\r\n            }\r\n\r\n            $bar_progress.setAttribute('width', $bar_progress.owidth + dx);\r\n            $.attr(bar.$handle_progress, 'cx', $bar_progress.getEndX());\r\n\r\n            $bar_progress.finaldx = dx;\r\n        });\r\n\r\n        $.on(this.$svg, 'mouseup', () => {\r\n            is_resizing = false;\r\n            if (!($bar_progress && $bar_progress.finaldx)) return;\r\n\r\n            $bar_progress.finaldx = 0;\r\n            bar.progress_changed();\r\n            bar.set_action_completed();\r\n            bar = null;\r\n            $bar_progress = null;\r\n            $bar = null;\r\n        });\r\n    }\r\n\r\n    get_all_dependent_tasks(task_id) {\r\n        let out = [];\r\n        let to_process = [task_id];\r\n        while (to_process.length) {\r\n            const deps = to_process.reduce((acc, curr) => {\r\n                acc = acc.concat(this.dependency_map[curr]);\r\n                return acc;\r\n            }, []);\r\n\r\n            out = out.concat(deps);\r\n            to_process = deps.filter((d) => !to_process.includes(d));\r\n        }\r\n\r\n        return out.filter(Boolean);\r\n    }\r\n\r\n    get_snap_position(dx, ox) {\r\n        let unit_length = 1;\r\n        const default_snap =\r\n            this.options.snap_at || this.config.view_mode.snap_at || '1d';\r\n\r\n        if (default_snap !== 'unit') {\r\n            const { duration, scale } = date_utils.parse_duration(default_snap);\r\n            unit_length =\r\n                date_utils.convert_scales(this.config.view_mode.step, scale) /\r\n                duration;\r\n        }\r\n\r\n        const rem = dx % (this.config.column_width / unit_length);\r\n\r\n        let final_dx =\r\n            dx -\r\n            rem +\r\n            (rem < (this.config.column_width / unit_length) * 2\r\n                ? 0\r\n                : this.config.column_width / unit_length);\r\n        let final_pos = ox + final_dx;\r\n\r\n        const drn = final_dx > 0 ? 1 : -1;\r\n        let ignored_regions = this.get_ignored_region(final_pos, drn);\r\n        while (ignored_regions.length) {\r\n            final_pos += this.config.column_width * drn;\r\n            ignored_regions = this.get_ignored_region(final_pos, drn);\r\n            if (!ignored_regions.length)\r\n                final_pos -= this.config.column_width * drn;\r\n        }\r\n        return final_pos - ox;\r\n    }\r\n\r\n    get_ignored_region(pos, drn = 1) {\r\n        if (drn === 1) {\r\n            return this.config.ignored_positions.filter((val) => {\r\n                return pos > val && pos <= val + this.config.column_width;\r\n            });\r\n        } else {\r\n            return this.config.ignored_positions.filter(\r\n                (val) => pos >= val && pos < val + this.config.column_width,\r\n            );\r\n        }\r\n    }\r\n\r\n    unselect_all() {\r\n        if (this.popup) this.popup.parent.classList.add('hide');\r\n        this.$container\r\n            .querySelectorAll('.date-range-highlight')\r\n            .forEach((k) => k.classList.add('hide'));\r\n    }\r\n\r\n    view_is(modes) {\r\n        if (typeof modes === 'string') {\r\n            return this.config.view_mode.name === modes;\r\n        }\r\n\r\n        if (Array.isArray(modes)) {\r\n            return modes.some(view_is);\r\n        }\r\n\r\n        return this.config.view_mode.name === modes.name;\r\n    }\r\n\r\n    get_task(id) {\r\n        return this.tasks.find((task) => {\r\n            return task.id === id;\r\n        });\r\n    }\r\n\r\n    get_bar(id) {\r\n        return this.bars.find((bar) => {\r\n            return bar.task.id === id;\r\n        });\r\n    }\r\n\r\n    show_popup(opts) {\r\n        if (this.options.popup === false) return;\r\n        if (!this.popup) {\r\n            this.popup = new Popup(\r\n                this.$popup_wrapper,\r\n                this.options.popup,\r\n                this,\r\n            );\r\n        }\r\n        this.popup.show(opts);\r\n    }\r\n\r\n    hide_popup() {\r\n        this.popup && this.popup.hide();\r\n    }\r\n\r\n    trigger_event(event, args) {\r\n        if (this.options['on_' + event]) {\r\n            this.options['on_' + event].apply(this, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the oldest starting date from the list of tasks\r\n     *\r\n     * @returns Date\r\n     * @memberof Gantt\r\n     */\r\n    get_oldest_starting_date() {\r\n        if (!this.tasks.length) return new Date();\r\n        return this.tasks\r\n            .map((task) => task._start)\r\n            .reduce((prev_date, cur_date) =>\r\n                cur_date <= prev_date ? cur_date : prev_date,\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Clear all elements from the parent svg element\r\n     *\r\n     * @memberof Gantt\r\n     */\r\n    clear() {\r\n        this.$svg.innerHTML = '';\r\n        this.$header?.remove?.();\r\n        this.$side_header?.remove?.();\r\n        this.$current_highlight?.remove?.();\r\n        this.$extras?.remove?.();\r\n        this.popup?.hide?.();\r\n    }\r\n}\r\n\r\nGantt.VIEW_MODE = {\r\n    //HOUR: DEFAULT_VIEW_MODES[0],\r\n    //QUARTER_DAY: DEFAULT_VIEW_MODES[1],\r\n    //HALF_DAY: DEFAULT_VIEW_MODES[2],\r\n    DAY: DEFAULT_VIEW_MODES[3],\r\n    WEEK: DEFAULT_VIEW_MODES[4],\r\n    MONTH: DEFAULT_VIEW_MODES[5],\r\n    YEAR: DEFAULT_VIEW_MODES[6],\r\n};\r\n\r\nfunction generate_id(task) {\r\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\r\n}\r\n\r\nfunction sanitize(s) {\r\n    return s.replaceAll(' ', '_').replaceAll(':', '_').replaceAll('.', '_');\r\n}\r\n"],"names":["YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","date_utils","duration","matches","date","date_separator","time_separator","date_parts","time_parts","parts","val","vals","with_time","i","padStart","date_string","time_string","date_format","lang","dateTimeFormat","dateTimeFormatShort","month_name","month_name_capitalized","values","d","format_map","str","formatted_values","a","b","key","value","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","yearDiff","monthDiff","qty","scores","should_reset","_scale","max_score","period","to_scale","TO_DAYS","no_of_days","month","year","targetLength","padString","$","expr","con","createSVG","tag","attrs","elem","attr","animateSVG","svgElement","from","to","animatedSvgElement","getAnimationElement","event","dur","begin","animEl","animateElement","cubic_bezier","name","element","selector","callback","handler","e","delegatedTarget","Arrow","gantt","from_task","to_task","start_x","condition","start_y","end_x","end_y","from_is_below_to","curve","clockwise","curve_y","down_1","down_2","left","offset","Bar","task","r","x","$date_highlight","width","ignored_end","total_ignored_area","acc","progress_width","progress_end","total_ignored_progress","ignored_regions","x_coord","x_offset","y_offset","defs","clipPath","bar","handle_width","bar_progress","handle","task_id","posX","cx","timeout","_a","_b","dep","prev","curr","sx","container","label","img","img_mask","barWidthLimit","newLabelX","newImgX","imgWidth","labelEndX","viewportCentral","changed","new_start_date","new_end_date","x_in_units","width_in_units","progress_area","progress","total","column_width","task_start","gantt_start","m_baseline_start","diff","actual_duration_in_days","duration_in_days","k","padding","x_offset_label_img","labelWidth","barWidth","arrow","Popup","parent","popup_func","y","target","html","title","subtitle","details","func","action","getDecade","formatWeek","ld","endOfWeek","endFormat","beginFormat","DEFAULT_VIEW_MODES","DEFAULT_OPTIONS","ctx","start_date","end_date","Gantt","wrapper","tasks","options","svg_element","wrapper_element","el","CSS_VARIABLES","setting","option","tmpDuration","deps","generate_id","t","id","new_details","mode","maintain_pos","old_pos","old_scroll_op","refresh","gantt_end","padding_start","padding_end","cur_date","layers","layer","grid_width","grid_height","rows_layer","row_width","row_height","$select","$el","$option","$today_button","tick_x","tick_y","tick_height","$lines_layer","row_y","tick_class","labels","color","check_highlight","extra_func","f","dateObj","height","d_formatted","res","_","top","classes","append_to","type","cls","$lower_text","sanitize","$upper_text","last_date_info","last_date","upper_text","lower_text","arrows","dependency","cur_width","actual_width","min_start","scroll_pos","current_upper","now","current","c","$highlights","h","max_start","max_end","group","is_dragging","x_on_start","x_on_scroll_start","is_resizing_left","is_resizing_right","parent_bar_id","bars","action_in_progress","pos","bar_wrapper","ids","$bar","extended","trigger","old_scroll_left","localBars","dx","_c","is_resizing","$bar_progress","range_positions","now_x","end","out","to_process","ox","unit_length","default_snap","rem","final_dx","final_pos","drn","modes","opts","args","prev_date","_d","_e","_f","_g","_h","_i","_j","s"],"mappings":"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"}